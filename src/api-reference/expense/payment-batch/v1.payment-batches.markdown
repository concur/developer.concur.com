---
title: Payment Batches
layout: reference
---

# Payment Batches

The Payment Batch File web service provides an automated solution to clients who would like to manage their payment batches and collect their batch files.

* [Retrieve the list of payment batches](#getpaymentbatches)
  * [Schema](#getpaymentbatchesschema)
* [Close a payment batch asynchronously](#closepaymentbatch)
  * [Schema](#closepaymentbatchschema)
* [Close a payment batch synchronously](#closepaymentbatchsync)
  * [Schema](#closepaymentbatchsyncschema)
* [Retrieve a payment batch file](#getbatchfile)
  * [Schema](#getbatchfileschema)
* [Error Messages](#errormessages)

## Process Flow

![Process Flow for Payment Batch](./payment-batch.png)

## Product and Edition

Concur Expense Standard Edition
> **NOTE**: For Concur Expense Professional Edition, use [Extracts v1 API](https://developer.concur.com/api-reference/common/extracts/v1.extracts.html)

## <a name="getpaymentbatches"></a>Retrieve the List of Payment Batches

Retrieves the list of payment batches with an optional requested status.

```
GET /api/expense/paymentbatch/v1.1/batchlist/
```

### Parameters

Name|Type|Format|Description
---|---|---|---
`batchlist`|`string`|-|**Required.** The batchlist keyword.
`Status`|`Boolean`|-|The status of the batches. Can be either OPEN or CLOSED.

### <a name="getpaymentbatchesschema"></a>Retrieve Payment Batches Response Schema

Name|Type|Format|Description
---|---|---|---
`BatchName`|`string`|-|The batch name, as it appears in Payment Manager.
`BatchID`|`string`|-|The unique identifier for the batch.
`BatchTotal`|`Decimal`|-|The batch total amount.
`Currency`|`string`|-|The [3-letter ISO 4217 currency code](http://en.wikipedia.org/wiki/ISO_4217) for the batch.
`Count`|`string`|-|The number of payment demands in the batch.
`Type`|`string`|-|The payee of the batch. Either Employee or Card Program.
`PaymentMethod`|`string`|-|The reimbursement method for the batch. Either Expense Pay by SAP Concur, Company Check (via Accounts Payable), ADP (via EPIP file), or Other Reimbursement Methods.
`Batch-URL`|`string`|-|The URL to use as a basis for other actions, such as closing the batch.

## <a name="closepaymentbatch"></a>Close a Payment Batch Asynchronously
### Version 1.2

This asynchronous request schedules closing of the specified batch, preventing any new expenses from entering it. After the batch closes, you can use Close Payment Batch v1.1 to get the `File-Url` to download the file containing the expense transaction information.

> **Note**: You can check batch status using the Retrieve the List of Payment Batches method.

```
POST /api/expense/paymentbatch/v1.2/batch/{BatchID}/close
```

### Parameters

Name|Type|Format|Description
---|---|---|---
`BatchID`|`string`|-|**Required.** The unique identifier for the batch.
`close`|`string`|-|**Required.** The close keyword.

### <a name="closepaymentbatchschema"></a>Close Payment Batch Asynchronously Response Schema

Name|Type|Format|Description
---|---|---|---
`Status`|`string`|-|The status of the request to close the batch.
`JobQueueKey`|`string`|-|The unique identifier for the batch job.

## <a name="closepaymentbatchsync"></a>Close a Payment Batch Synchronously
### Version 1.1

This request synchronously closes the batch preventing any new expenses from entering it. After the batch closes, SAP Concur creates the batch file containing the expense transaction information. If a batch ID for an already closed batch is sent, SAP Concur regenerates the batch file for the specified batch.

This synchronous call has a time limit that can be superseded by the time it takes to close the batch. It is recommended that you use Close a Payment Batch Asynchronously (v1.2) to close batches, then use this request after the batch is closed to obtain the `File-Url` needed to download the file with the expense transaction information.

> **Note**: You can check batch status using the Retrieve the List of Payment Batches method.

```
POST /api/expense/paymentbatch/v1.1/batch/{BatchID}/close
```

### Parameters

Name|Type|Format|Description
---|---|---|---
`BatchID`|`string`|-|**Required.** The unique identifier for the batch.
`close`|`string`|-|**Required.** The close keyword.

### <a name="closepaymentbatchsyncschema"></a>Close Payment Batch Synchronously Response Schema

Name|Type|Format|Description
---|---|---|---
`BatchStatus`|`string`|-|The current status of the specified batch.
`File-Url`|`string`|-|A URL for retrieving the extract file or files produced when the batch closes, with encrypted ID.
`Status`|`string`|-|The status of the request to close the batch.

## <a name="getbatchfile"></a>Retrieve a Payment Batch File

Requests the expense transaction data for the specified payment batch.

```
GET /api/expense/paymentbatch/v1.1/batch/{JobRunKey}/file
```

### Parameters

Name|Type|Format|Description
---|---|---|---
`JobRunKey`|`string`|-|**Required.**  The `File-Url` element returned by the Close Batches 1.1 API response contains the encrypted JobRunKey. In practice, you can use the `File-Url` whole value to download the file.

### <a name="getbatchfileschema"></a>Retrieve Payment Batch File Response Schema

This request will return the expense transaction data in text/csv format if there was a single file produced or as a zip archive if the batch is configured to produce more than one file. An example of a client who will receive multiple files is a client using QuickBooks, who receives one file formatted for import into QuickBooks (.IIF extension), and one file for the general ledger (.CSV extension), inside a .ZIP file.  

## <a name="errormessages"></a>Error Messages

Error Number|Description
---|---
`500`|The batch you attempted to close does not contain any reports. If you recently approved reports for payment, wait 30 minutes and try again.

## <a name="erp-integration"></a>Enterprise Resource Planning Integration

Before you begin, you need to close the Payment Manager batch in order for you to retrieve the files using this API. Ask your client not to close the batch manually through the user interface.

1. Obtain a list of your clientâ€™s batches by using [Get list of batches](#getpaymentbatches)
1. Close the desired batch by using [Close a payment batch](#closepaymentbatch)
1. Retrieve the file you want by using [Retrieve a payment batch file](#getbatchfile)
