---
title: User Locations
layout: reference
---

# User Locations

* [Overview](#overview)
* [Prerequisites](#prerequisites)
* [Regional Availability](#regionalAvailability)
* [Schema](#schema)
  * [Client](#client)
  * [Users](#users)
  * [Locations](#locations)
  * [Source Partner](#sourcePartner)
  * [Transaction](#transaction)
* [Request Headers](#requestHeaders)
* [Response Headers](#responseHeaders)
* [Status Codes](#statusCodes)
* [Example](#example)

## Overview


The goal of this API is to allow customers and 3rd party vendors to add their traveler's location data to Concur Locate so it can be utilized locate and contact travelers to address their duty of care requirements.

This API supports POST only.


## Prerequisites


1. [Obtain a client ID, secret and sandbox environment](/manage-apps/partner-applications.html) if you don't already have one.
2. Obtain your [Source partner](#sourcePartner) information. This will be provided along with your application credentials.
3. Read the [Getting Started](/api-reference/authentication/getting-started.html) section of [Authentication API](/api-reference/authentication/apidoc.html).
This API supports [Client Credentials Grant](/api-reference/authentication/apidoc.html#client_credentials) only. Your sandbox will be configured to accept posts from your application.

## Regional Availability

```
https://us.api.concursolutions.com/locate/api/v1/user/locations
```
```
https://emea.api.concursolutions.com/locate/api/v1/user/locations
```



## Schema
_POST /locate/api/v1/user/locations_

See the schema documentation below for the specifications of each type, plus the various schemas that are shared components of each receipt schema. Property names mentioned in __*bold italics*__ are required fields.

The user locations API includes users and itineraries (locations) in addition to information about the company and post type (add or cancel).

  | Property Name  | Type    | Format | Description
  | ---------------| --------| -------| -----------
  | __*UserLocations*__ | Object | JSON | Contains the Client, Users, Locations, Source Partner and Transaction.
  | __*Client*__  |  Object |  JSON  |  This indicates which entity within the organization the traveler belongs to.
  | __*Users*__ | Object | JSON | This is the users' information. This will be used to either create a new traveler or to match with an existing traveler.
  | __*Locations*__ |Object | JSON | This is the users' location information. Multiple locations can be passed for a single user.
  | __*SourcePartner*__ | Object | JSON | This is used to identify your application. This information will be provided to you in advance.
  | __*Transaction*__ | Object | JSON | Whether this transaction adds or cancels itineraries/locations.

### Client
This indicates which entity within the organization the traveler belongs to. This will vary by client. You will be provided with a list of the applicable agencies for each customer.

| Property Name | Values / Length | Type | Description
| ---------------| -------------| -----| -----------
| __*Id*__ | 36 | String| Id: This maps to the top-level agency (corporation).
| firstSubLevel | 36 | String | This is the child corporation one level below the top level corporation.
| secondSubLevel | 36 | String | This is the sub level of the child corporation (firstsublevel).

### Users
This information will be used to match or create a new user. Either login ID or email address must be provided. If an existing user is not found for the login ID or email, one will be created. The mobile field must unique for a particular user. It must not be shared between different users. If mobile number is not provided then the email will be used to create or update the user. The same email can be associated with different users. In such a case the validation for uniqueness will happen through the email, corporation, first name, last name. mobileCountryCode should be either the two character country code like US or IT or it should be the nDigit international country code like 001 or 91.                            

| Property Name | Values / Length | Type | Description
| ------------- | ----------------| ---- | -----------
| __*userID*__ | | This is a unique identifier for the user generated by your application.
| firstName | 100 | String |
| lastName | 100 | String |
| email | 255 | String | Either email or concurLoginId must be provided
| employeeId | 19 | String | 
| mobileCountryCode | 3 | String |
| mobile | 10 | String |
| optedIn | 'True' / 'False' | String |
| concurLoginId | 128 | String | Either email or concurLoginId must be provided.
| affiliation | 255 | String | Used to indicate the type of traveler (e.g. employee, student, faculty)  


### Locations
This section includes information about the traveler's future or current location. Either the location latitude and longitude OR the IATA (airport) code must be present. If both are present, the latitude and longitude take precedence.

| Property Name | Values / Length | Type | Description
| ------------- | --------------- | ---- | -----------
| locationId | | String |
| locationAddress | 512 | String |
| locationName | 100 | String |
| locationDescription | 100 | String |
| locationPhone | 50 | String |
| locationLatitude | | String | Either the airport or latitude/longitude must be provided.
| locationLongitude | | String | Either the airport or latitude/longitude must be provided.
| locationIATACode | 3 | String | [IATA Airport Codes](https://en.wikipedia.org/wiki/List_of_airports_by_IATA_code:_A) Either the airport or latitude/longitude must be provided.
| startDate | 16 | String (format YYYY-MM-DDTHH:MM) | traveler's arrival date
| endDate | 16 | String (format YYYY-MM-DDTHH:MM) | traveler's departure date
| timezoneId | 60 | String | As a reference the full set of timezones can be found atÂ <http://joda-time.sourceforge.net/timezones.html>
| visitorID | 5 | This corresponds to the user ID provided in the [Users](#users) schema

### Source partner
This information will be provided to you along with your client ID and secret.

| Property Name | Values / Length | Type | Description
| ------------- | --------------- | ---- | -----------
| __*Id*__ | 5 | String |
| name | 100 | String |
| description | 100 | String |

### Transaction
Itineraries can be added or cancelled. This section allows you to indicate whether this is an addition of a new itinerary or cancellation of an existing itinerary. A cancellation request is for canceling the itinerary completely in our system and if there are any updates to the existing itineraries then it needs to be resent using the same booking or transaction id.

| __*transactionId*__ | 5 | String | This is a unique identifier generated by your application for the request.
| __*createdDate*__  | 16 | String (format YYYY-MM-DDTHH:MM) |
| __*transactionType*__ | 10 | 'Add' or 'Cancel' |

## Request Headers

* [RFC 7230 Host](https://tools.ietf.org/html/rfc7230#section-5.4)
* [RFC 7231 Accept](https://tools.ietf.org/html/rfc7231#section-5.3.2)
* [RFC 7231 Accept-Encoding](https://tools.ietf.org/html/rfc7231#section-5.3.4)
* [RFC 7231 Accept-Language](https://tools.ietf.org/html/rfc7231#section-5.3.5)
* [RFC 7235 Authorization](https://tools.ietf.org/html/rfc7235#section-4.2)
* [RFC 7231 Referer](https://tools.ietf.org/html/rfc7231#section-5.5.2)
* [RFC 7231 User-Agent](https://tools.ietf.org/html/rfc7231#section-5.5.3)

## Response Headers

RFC7231 Content-Encoding

RFC7231 Content-Type: application/json

Date

RFC7230 Transfer-Encoding

RFC7231 Vary

## Status Codes


* [200 OK](https://tools.ietf.org/html/rfc7231#section-6.3.1)
* 204 No Content / Empty Response
* 400 Bad Request
* 401 Unauthorised / 403 Forbidden
* 500 Internal Server Error

Exceptions from the service will be mapped to one of the aforementioned
error codes.


## Example


### Request URL

  ```
  https://{baseURI}/locate/api/v1/user/locations
  ```

### Request

```
 curl -X POST \--header \'Content-Type: application/json\' \--header   
 \'Accept: application/json\' \--header \'Authorization: Bearer        
 \<JWT\> -d \'{
  "userLocations": [
    {
       "client": {
        "id": "CTG",
        "firstSubLevel": "Test_SL1_Demo",
        "secondSubLevel": "Test_SL2_Demo"
      },
      "users": [
        {
           "userId": 0,
          "firstName": "Test",
          "lastName": "User",
          "email": "clientOneXML@tuser.com",
          "employeeId": "Cli123",
          "mobileCountryCode": "string",
          "mobile": "442345623456",
          "optedIn": true,
          "concurLoginId": "",
"affiliation": "Student"
        }
      ],
      "locations": [
        {
          "locationId": 0,
          "locationAddress": "Off Fox Street, Landstown AZ 45456",
          "locationName": "Youth Hostel",
          "locationDescription": "Travel Stuff",
          "locationLatitude": "57.2019",
          "locationLongitude": "-3.19778",
          "locationIataCode": "",
          "startDate": "2017-11-02T12:07",
          "endDate": "2017-11-02T12:07",
          "timezoneId": "Europe/London",
          "locationPhone": "string",
          "visitorId": [
            0
          ]
        }
      ],
      "sourcePartner": {
         "id": "TD",
        "name": "Terra Dotta",
        "description": "Universities stuff"
      },
      "transaction": {
        "transactionId": "Nui-API",
        "createdDate": "2017-11-02T12:05",
        "transactionType": "Add"
      }
    }
  ]
}

```
### Response Header

```
{                                                                                                  
 "access-control-allow-origin": "*",                                                         
 "date": "Mon, 15 May 2018 14:28:07 GMT",                                                     
 "access-control-allow-credentials": "false",                                                 
 "server": "Apache-Coyote/1.1",                                                                 
 "content-length": "20",                                                                        
 "content-type\": "application/json"                                                           
 }                                                
```

### Response Body

```
{                       
"messageText": "OK"                          
 }                       
```
