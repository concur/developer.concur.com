{
  "swagger": "2.0",
  "info": {
    "description": "Request as a Service",
    "version": "4.0",
    "title": "Concur Request API Documentation"
  },
  "host": "us.api.concursolutions.com",
  "basePath": "/",
  "tags": [
    {
      "name": "Request Resource",
      "description": "Represents the starting point of pre-spend authorizations within Concur Request"
    },
    {
      "name": "Workflow Resource",
      "description": "Manage workflow transitions for a Request"
    },
    {
      "name": "Travel Agency Resource",
      "description": "Get details of travel agencies integrated with Concur Request"
    },
    {
      "name": "Policy Resource",
      "description": "Get available Request Policies"
    },
    {
      "name": "Expected Expense Resource",
      "description": "Manage expected expenses attached to a Request"
    },
    {
      "name": "Cash Advance Resource",
      "description": "Retrieve cash advance for Concur Request"
    },
    {
      "name": "Agency Proposal Resource",
      "description": "Manage the agency proposals for a Request"
    }
  ],
  "paths": {
    "/travelrequest/v4/requests": {
      "get": {
        "tags": [
          "Request Resource"
        ],
        "summary": "Get the list of existing Requests",
        "description": "Provides the list of existing Requests. Can be based on the Request owner, the workflow status of the Request and other available parameters.",
        "operationId": "getListUsingGET",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "view",
            "in": "query",
            "description": "Name of the perimeter defining the Requests to get",
            "required": false,
            "type": "string",
            "default": "ALL",
            "enum": [
              "ALL",
              "ACTIVE",
              "UNSUBMITTED",
              "PENDING",
              "VALIDATED",
              "APPROVED",
              "CANCELED",
              "CLOSED",
              "SUBMITTED",
              "TOAPPROVE",
              "PENDINGPROPOSAL",
              "PROPOSALAPPROVED",
              "PROPOSALCANCELED",
              "PENDINGEBOOKING"
            ]
          },
          {
            "name": "userId",
            "in": "query",
            "description": "The unique identifier of the Request owner to use when searching for Requests",
            "required": false,
            "type": "string"
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Pagination : number of records to return per page - maximum limit is 100, if higher value or digit value is set, a 400 error code will be displayed",
            "required": false,
            "type": "string",
            "default": "10"
          },
          {
            "name": "start",
            "in": "query",
            "description": "Pagination : index of the first record",
            "required": false,
            "type": "string",
            "default": "0"
          },
          {
            "name": "modifiedAfter",
            "in": "query",
            "description": "Lower bound of modification date. Format: yyyy-MM-ddTHH:mm:ss.SSSZ or yyyy-MM-dd",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "modifiedBefore",
            "in": "query",
            "description": "Upper bound of modification date. Format: yyyy-MM-ddTHH:mm:ss.SSSZ or yyyy-MM-dd",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "sortField",
            "in": "query",
            "description": "The name of the field on which to sort",
            "required": false,
            "type": "string",
            "default": "startDate",
            "enum": [
              "startDate",
              "approvalStatus",
              "requestId"
            ]
          },
          {
            "name": "sortOrder",
            "in": "query",
            "description": "Sort order (ASC or DESC)",
            "required": false,
            "type": "string",
            "default": "DESC",
            "enum": [
              "ASC",
              "DESC"
            ]
          },
          {
            "name": "approvedAfter",
            "in": "query",
            "description": "Lower bound of approval date. Format: yyyy-MM-ddTHH:mm:ss",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "approvedBefore",
            "in": "query",
            "description": "Upper bound of approval date. Format: yyyy-MM-ddTHH:mm:ss",
            "required": false,
            "type": "string",
            "format": "date-time"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/PageResultOfResourceOfRequest"
            }
          },
          "400": {
            "description": "Bad param(s) : the request is invalid",
            "examples": {
              "application/json": {
                "errors": [
                  {
                    "errorCode": "userNotFound",
                    "errorMessage": "User is not found"
                  }
                ]
              }
            },
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "description": "You do not have permission to perform this operation.",
            "examples": {
              "application/json": {
                "errors": [
                  {
                    "errorCode": "permissionDenied",
                    "errorMessage": "Permission denied"
                  }
                ]
              }
            },
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "Not found - You tried to get a non-existing request.",
            "examples": {
              "application/json": {
                "errors": [
                  {
                    "errorCode": "notFound",
                    "errorMessage": "Resource not found"
                  }
                ]
              }
            },
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "examples": {
              "application/json": {
                "errors": [
                  {
                    "errorCode": "timeOut",
                    "errorMessage": "Time out"
                  }
                ]
              }
            },
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "503": {
            "description": "The service is currently unavailable",
            "examples": {
              "application/json": {
                "errors": [
                  {
                    "errorCode": "entityOffline",
                    "errorMessage": "Entity is offline, please try again later."
                  }
                ]
              }
            },
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      },
      "post": {
        "tags": [
          "Request Resource"
        ],
        "summary": "Create a new Request",
        "description": "Creates a new Request for a traveler.",
        "operationId": "createUsingPOST_4",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "request",
            "description": "Request",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Request"
            }
          },
          {
            "name": "userId",
            "in": "query",
            "description": "The unique identifier of the Request owner for whom the Request will be created",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/Request"
            }
          },
          "400": {
            "description": "Invalid request body (no location found matching the country code and city name provided, invalid date, etc.)",
            "examples": {
              "application/json": {
                "errors": [
                  {
                    "errorCode": "missingRequiredField",
                    "errorMessage": "At least 1 required field has an empty value."
                  }
                ]
              }
            },
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "description": "You do not have permission to perform this operation",
            "examples": {
              "application/json": {
                "errors": [
                  {
                    "errorCode": "permissionDenied",
                    "errorMessage": "Permission denied"
                  }
                ]
              }
            },
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "Not found - You tried to get a non-existing request.",
            "examples": {
              "application/json": {
                "errors": [
                  {
                    "errorCode": "notFound",
                    "errorMessage": "Resource not found"
                  }
                ]
              }
            },
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "examples": {
              "application/json": {
                "errors": [
                  {
                    "errorCode": "internalServerError",
                    "errorMessage": "An unexpected error has prevented the operation"
                  }
                ]
              }
            },
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "503": {
            "description": "The service is currently unavailable",
            "examples": {
              "application/json": {
                "errors": [
                  {
                    "errorCode": "entityOffline",
                    "errorMessage": "Entity is offline, please try again later."
                  }
                ]
              }
            },
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/requests/{requestUuid}": {
      "get": {
        "tags": [
          "Request Resource"
        ],
        "summary": "Get the content of an existing Request",
        "description": "Provides the content of an existing Request, mainly the content of the Request header.",
        "operationId": "getUsingGET_6",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "requestUuid",
            "in": "path",
            "description": "The unique identifier of the Request",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/RequestDetails"
            }
          },
          "400": {
            "description": "Bad param(s) : the request is invalid (user Id for this request has not been found, concur correlation id of the request is not a valid UUID, etc.) ",
            "examples": {
              "application/json": {
                "errors": [
                  {
                    "errorCode": "userNotFound",
                    "errorMessage": "User is not found"
                  }
                ]
              }
            },
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "description": "You do not have permission to perform this operation",
            "examples": {
              "application/json": {
                "errors": [
                  {
                    "errorCode": "permissionDenied",
                    "errorMessage": "Permission denied"
                  }
                ]
              }
            },
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "Not found - You tried to get a non-existing request",
            "examples": {
              "application/json": {
                "errors": [
                  {
                    "errorCode": "notFound",
                    "errorMessage": "Resource not found"
                  }
                ]
              }
            },
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "examples": {
              "application/json": {
                "errors": [
                  {
                    "errorCode": "internalServerError",
                    "errorMessage": "An unexpected error has prevented the operation"
                  }
                ]
              }
            },
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "503": {
            "description": "The service is currently unavailable",
            "examples": {
              "application/json": {
                "errors": [
                  {
                    "errorCode": "entityOffline",
                    "errorMessage": "Entity is offline, please try again later."
                  }
                ]
              }
            },
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      },
      "put": {
        "tags": [
          "Request Resource"
        ],
        "summary": "Update the content of an existing Request",
        "description": "Updates the content of an existing Request. Update of the following fields is supported : `comment`, `startDate`, `startTime`, `endDate`, `endTime`, `expensePolicy`, `name`, `businessPurpose`, `mainDestination`, `travelAgency`, and `custom fields`. Other fields will be ignored. Partial update is supported, you may submit only the fields to update in the body, fields not present in the body will remain unchanged.",
        "operationId": "updateUsingPUT_2",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "requestUuid",
            "in": "path",
            "description": "The unique identifier of the Request",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "request",
            "description": "request",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Request"
            }
          },
          {
            "name": "userId",
            "in": "query",
            "description": "The unique identifier of the user",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Request"
            }
          },
          "400": {
            "description": "Invalid request body (no location found matching the country code and city name provided, invalid date, etc.)",
            "examples": {
              "application/json": {
                "errors": [
                  {
                    "errorCode": "missingRequiredField",
                    "errorMessage": "At least 1 required field has an empty value."
                  }
                ]
              }
            },
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "description": "You do not have permission to perform this operation",
            "examples": {
              "application/json": {
                "errors": [
                  {
                    "errorCode": "permissionDenied",
                    "errorMessage": "Permission denied"
                  }
                ]
              }
            },
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "Not found - You tried to get a non-existing request",
            "examples": {
              "application/json": {
                "errors": [
                  {
                    "errorCode": "notFound",
                    "errorMessage": "Resource not found"
                  }
                ]
              }
            },
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "examples": {
              "application/json": {
                "errors": [
                  {
                    "errorCode": "internalServerError",
                    "errorMessage": "An unexpected error has prevented the operation"
                  }
                ]
              }
            },
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "503": {
            "description": "The service is currently unavailable",
            "examples": {
              "application/json": {
                "errors": [
                  {
                    "errorCode": "entityOffline",
                    "errorMessage": "Entity is offline, please try again later."
                  }
                ]
              }
            },
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Request Resource"
        ],
        "summary": "Delete an existing Request",
        "description": "Deletes an existing Request. Possible only if a Request can be deleted.",
        "operationId": "deleteUsingDELETE_1",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "requestUuid",
            "in": "path",
            "description": "The unique identifier of the Request",
            "required": true,
            "type": "string"
          },
          {
            "name": "userId",
            "in": "query",
            "description": "The unique identifier of the user",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "boolean"
            }
          },
          "400": {
            "description": "Bad param(s):the request is invalid",
            "examples": {
              "application/json": {
                "errors": [
                  {
                    "errorCode": "userNotFound",
                    "errorMessage": "User is not found"
                  }
                ]
              }
            },
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "description": "You do not have permission to perform this operation.",
            "examples": {
              "application/json": {
                "errors": [
                  {
                    "errorCode": "permissionDenied",
                    "errorMessage": "Permission denied"
                  }
                ]
              }
            },
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "Not found - You tried to get a non-existing request",
            "examples": {
              "application/json": {
                "errors": [
                  {
                    "errorCode": "notFound",
                    "errorMessage": "Resource not found"
                  }
                ]
              }
            },
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "examples": {
              "application/json": {
                "errors": [
                  {
                    "errorCode": "internalServerError",
                    "errorMessage": "An unexpected error has prevented the operation"
                  }
                ]
              }
            },
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "503": {
            "description": "The service is currently unavailable",
            "examples": {
              "application/json": {
                "errors": [
                  {
                    "errorCode": "entityOffline",
                    "errorMessage": "Entity is offline, please try again later."
                  }
                ]
              }
            },
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/requests/{requestUuid}/comments": {
      "get": {
        "tags": [
          "Request Resource"
        ],
        "summary": "Get the list of comments for an existing Request",
        "description": "Provides the list of comments for an existing Request (information displayed in the `comment`field of the Request header). Historization of comments is possible on the Request header. This endpoint will provide all the comments written during the life of the Request.",
        "operationId": "getCommentsByRequestUsingGET",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "requestUuid",
            "in": "path",
            "description": "The unique identifier of the Request",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Comment"
              }
            }
          },
          "400": {
            "description": "Bad param(s) : the request is invalid (user Id for this request has not been found, concur correlation id of the request is not a valid UUID, etc.)",
            "examples": {
              "application/json": {
                "errors": [
                  {
                    "errorCode": "userNotFound",
                    "errorMessage": "User is not found."
                  }
                ]
              }
            },
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "description": "You do not have permission to perform this operation.",
            "examples": {
              "application/json": {
                "errors": [
                  {
                    "errorCode": "permissionDenied",
                    "errorMessage": "Permission denied"
                  }
                ]
              }
            },
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "Not found - You tried to get a non-existing request",
            "examples": {
              "application/json": {
                "errors": [
                  {
                    "errorCode": "notFound",
                    "errorMessage": "Resource not found"
                  }
                ]
              }
            },
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "examples": {
              "application/json": {
                "errors": [
                  {
                    "errorCode": "internalServerError",
                    "errorMessage": "An unexpected error has prevented the operation"
                  }
                ]
              }
            },
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "503": {
            "description": "The service is currently unavailable",
            "examples": {
              "application/json": {
                "errors": [
                  {
                    "errorCode": "entityOffline",
                    "errorMessage": "Entity is offline, please try again later."
                  }
                ]
              }
            },
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/requests/{requestUuid}/cashadvances": {
      "get": {
        "tags": [
          "Request Resource"
        ],
        "summary": "Get the list of cash advances assigned to an existing Request",
        "description": "Provides the list of cash advances assigned to an existing Request.",
        "operationId": "getCashAdvancesByRequestUsingGET",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "requestUuid",
            "in": "path",
            "description": "The unique identifier of the Request",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ResourceLink"
              }
            }
          },
          "400": {
            "description": "Bad param(s) : the request is invalid (user Id for this request has not been found, concur correlation id of the request is not a valid UUID, etc.) ",
            "examples": {
              "application/json": {
                "errors": [
                  {
                    "errorCode": "userNotFound",
                    "errorMessage": "User is not found."
                  }
                ]
              }
            },
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "description": "You do not have permission to perform this operation",
            "examples": {
              "application/json": {
                "errors": [
                  {
                    "errorCode": "permissionDenied",
                    "errorMessage": "Permission denied"
                  }
                ]
              }
            },
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "Not found - You tried to get a non-existing request",
            "examples": {
              "application/json": {
                "errors": [
                  {
                    "errorCode": "notFound",
                    "errorMessage": "Resource not found"
                  }
                ]
              }
            },
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "An unexpected error has prevented the operation",
            "examples": {
              "application/json": {
                "errors": [
                  {
                    "errorCode": "internalServerError",
                    "errorMessage": "An unexpected error has prevented the operation"
                  }
                ]
              }
            },
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "503": {
            "description": "The service is currently unavailable",
            "examples": {
              "application/json": {
                "errors": [
                  {
                    "errorCode": "entityOffline",
                    "errorMessage": "Entity is offline, please try again later."
                  }
                ]
              }
            },
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/requests/{requestUuid}/exceptions": {
      "get": {
        "tags": [
          "Request Resource"
        ],
        "summary": "Get the list of exceptions linked to an existing Request",
        "description": "Provides the list of exceptions linked to an existing Request. All alerts raised within the Request header (exception messages generated via audit rules) will be provided via this endpoint.",
        "operationId": "getExceptionsByRequestUsingGET",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "requestUuid",
            "in": "path",
            "description": "The unique identifier of the Request",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/RequestException"
              }
            }
          },
          "400": {
            "description": "Bad param(s) : the request is invalid (user Id for this request has not been found, concur correlation id of the request is not a valid UUID, etc.)",
            "examples": {
              "application/json": {
                "errors": [
                  {
                    "errorCode": "userNotFound",
                    "errorMessage": "User is not found."
                  }
                ]
              }
            },
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "description": "You do not have permission to perform this operation",
            "examples": {
              "application/json": {
                "errors": [
                  {
                    "errorCode": "permissionDenied",
                    "errorMessage": "Permission denied"
                  }
                ]
              }
            },
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "Not found - You tried to get a non-existing request",
            "examples": {
              "application/json": {
                "errors": [
                  {
                    "errorCode": "notFound",
                    "errorMessage": "Resource not found"
                  }
                ]
              }
            },
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "An unexpected error has prevented the operation",
            "examples": {
              "application/json": {
                "errors": [
                  {
                    "errorCode": "internalServerError",
                    "errorMessage": "An unexpected error has prevented the operation"
                  }
                ]
              }
            },
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "503": {
            "description": "The service is currently unavailable",
            "examples": {
              "application/json": {
                "errors": [
                  {
                    "errorCode": "entityOffline",
                    "errorMessage": "Entity is offline, please try again later."
                  }
                ]
              }
            },
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/requests/{requestUuid}/{action}": {
      "post": {
        "tags": [
          "Workflow Resource"
        ],
        "summary": "Move an existing Request in the approval workflow",
        "description": "Moves an existing Request within the approval workflow. All available workflow actions are displayed in the `action` parameter.",
        "operationId": "workflowActionUsingPOST",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "requestUuid",
            "in": "path",
            "description": "The unique identifier of the Request",
            "required": true,
            "type": "string"
          },
          {
            "name": "action",
            "in": "path",
            "description": "The workflow state transition to be executed",
            "required": true,
            "type": "string",
            "enum": [
              "submit",
              "approve",
              "recall",
              "sendback",
              "cancel",
              "close",
              "reopen"
            ]
          },
          {
            "in": "body",
            "name": "comment",
            "description": "Only usable when the workflow action is set to ‘sendback’.",
            "required": false,
            "schema": {
              "$ref": "#/definitions/WorkflowAction"
            }
          },
          {
            "name": "companyId",
            "in": "query",
            "description": "The unique identifier of the company",
            "required": false,
            "type": "string"
          },
          {
            "name": "userId",
            "in": "query",
            "description": "The unique identifier of the user performing the status transition",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Request"
            }
          },
          "400": {
            "description": "Bad param(s):the request is invalid",
            "examples": {
              "application/json": {
                "errors": [
                  {
                    "errorCode": "userNotFound",
                    "errorMessage": "User is not found."
                  }
                ]
              }
            },
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "description": "You do not have permission to perform this operation - User approving their own Request, or without approver/processor role",
            "examples": {
              "application/json": {
                "errors": [
                  {
                    "errorCode": "permissionDenied",
                    "errorMessage": "Permission denied"
                  }
                ]
              }
            },
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "Not found - You tried to get a non-existing request",
            "examples": {
              "application/json": {
                "errors": [
                  {
                    "errorCode": "notFound",
                    "errorMessage": "Resource not found"
                  }
                ]
              }
            },
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "409": {
            "description": "You must identify an approver before the Request moves on to the next workflow step.",
            "examples": {
              "application/json": {
                "errors": [
                  {
                    "errorCode": "NO_APPROVER",
                    "errorMessage": "You must identify an approver before the Request moves on to the next workflow step."
                  }
                ]
              }
            }
          },
          "500": {
            "description": "An unexpected error has prevented the operation",
            "examples": {
              "application/json": {
                "errors": [
                  {
                    "errorCode": "internalServerError",
                    "errorMessage": "An unexpected error has prevented the operation"
                  }
                ]
              }
            },
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "503": {
            "description": "The service is currently unavailable",
            "examples": {
              "application/json": {
                "errors": [
                  {
                    "errorCode": "entityOffline",
                    "errorMessage": "Entity is offline, please try again later."
                  }
                ]
              }
            },
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/requests/{requestUuid}/expenses": {
      "get": {
        "tags": [
          "Expected Expense Resource"
        ],
        "summary": "Get the list of expected expenses attached to a Request",
        "description": "Provides the list of expected expenses created within a Request with some content of each expected expense.",
        "operationId": "listUsingGET",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "requestUuid",
            "in": "path",
            "description": "The unique identifier of the Request",
            "required": true,
            "type": "string"
          },
          {
            "name": "userId",
            "in": "query",
            "description": "The unique identifier of the user viewing the expected expenses attached to a Request",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Expense"
              }
            }
          },
          "400": {
            "description": "Bad param(s):the request is invalid",
            "examples": {
              "application/json": {
                "errors": [
                  {
                    "errorCode": "userNotFound",
                    "errorMessage": "User is not found."
                  }
                ]
              }
            },
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "description": "You do not have permission to perform this operation",
            "examples": {
              "application/json": {
                "errors": [
                  {
                    "errorCode": "permissionDenied",
                    "errorMessage": "Permission denied"
                  }
                ]
              }
            },
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "Not found - You tried to get a non-existing request.",
            "examples": {
              "application/json": {
                "errors": [
                  {
                    "errorCode": "notFound",
                    "errorMessage": "Resource not found"
                  }
                ]
              }
            },
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "An unexpected error has prevented the operation",
            "examples": {
              "application/json": {
                "errors": [
                  {
                    "errorCode": "internalServerError",
                    "errorMessage": "An unexpected error has prevented the operation"
                  }
                ]
              }
            },
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "503": {
            "description": "The service is currently unavailable",
            "examples": {
              "application/json": {
                "errors": [
                  {
                    "errorCode": "entityOffline",
                    "errorMessage": "Entity is offline, please try again later."
                  }
                ]
              }
            },
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      },
      "post": {
        "tags": [
          "Expected Expense Resource"
        ],
        "summary": "Create a new expected expense",
        "description": "Creates a new expected expense within an existing Request.",
        "operationId": "createUsingPOST_2",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "requestUuid",
            "in": "path",
            "description": "The unique identifier of the Request to which the expected expense is attached",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "expense",
            "description": "expense",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Expense"
            }
          },
          {
            "name": "userId",
            "in": "query",
            "description": "The unique identifier of the user performing the expected expense creation",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/Expense"
            }
          },
          "400": {
            "description": "A request with no value on a mandatory field has been submitted",
            "examples":{
              "application/json":{
                "errors":[
                  {
                    "errorCode":"invalidLocation",
                    "errorMessage":"The location cannot be resolved, no location found for countryCode=IN, cityName=Pune and locationCode=XXA1."
                  }
                ]
              }
            },
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "description": "You do not have permission to perform this operation",
            "examples": {
              "application/json": {
                "errors": [
                  {
                    "errorCode": "permissionDenied",
                    "errorMessage": "Permission denied"
                  }
                ]
              }
            },
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "Not found - You tried to get a non-existing request.",
            "examples": {
              "application/json": {
                "errors": [
                  {
                    "errorCode": "notFound",
                    "errorMessage": "Resource not found"
                  }
                ]
              }
            },
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "An unexpected error has prevented the operation",
            "examples": {
              "application/json": {
                "errors": [
                  {
                    "errorCode": "internalServerError",
                    "errorMessage": "An unexpected error has prevented the operation"
                  }
                ]
              }
            },
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "503": {
            "description": "The service is currently unavailable",
            "examples": {
              "application/json": {
                "errors": [
                  {
                    "errorCode": "entityOffline",
                    "errorMessage": "Entity is offline, please try again later."
                  }
                ]
              }
            },
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/expenses/{expenseUuid}": {
      "get": {
        "tags": [
          "Expected Expense Resource"
        ],
        "summary": "Get the content of an expected expense",
        "description": "Provides the content of an expected expense.",
        "operationId": "getUsingGET_2",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "expenseUuid",
            "in": "path",
            "description": "The unique identifier of the expected expense",
            "required": true,
            "type": "string"
          },
          {
            "name": "userId",
            "in": "query",
            "description": "The unique identifier of the user viewing the expected expense",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Expense"
            }
          },
          "400": {
            "description": "Bad param(s):the request is invalid",
            "examples":{
              "application/json":{
                "errors":[
                  {
                    "errorCode":"userNotFound",
                    "errorMessage":"User is not found"
                  }
                ]
              }
            },
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "description": "You do not have permission to perform this operation",
            "examples": {
              "application/json": {
                "errors": [
                  {
                    "errorCode": "permissionDenied",
                    "errorMessage": "Permission denied"
                  }
                ]
              }
            },
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "Not found - You tried to get a non-existing request.",
            "examples": {
              "application/json": {
                "errors": [
                  {
                    "errorCode": "notFound",
                    "errorMessage": "Resource not found"
                  }
                ]
              }
            },
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "An unexpected error has prevented the operation",
            "examples": {
              "application/json": {
                "errors": [
                  {
                    "errorCode": "internalServerError",
                    "errorMessage": "An unexpected error has prevented the operation"
                  }
                ]
              }
            },
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "503": {
            "description": "The service is currently unavailable",
            "examples": {
              "application/json": {
                "errors": [
                  {
                    "errorCode": "entityOffline",
                    "errorMessage": "Entity is offline, please try again later."
                  }
                ]
              }
            },
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      },
      "put": {
        "tags": [
          "Expected Expense Resource"
        ],
        "summary": "Update the content of an expected expense",
        "description": "Updates the content of an expected expense. Partial update is not supported, the full body needs to be provided to update a field.",
        "operationId": "updateUsingPUT",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "expenseUuid",
            "in": "path",
            "description": "The unique identifier of the expected expense to update",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "expense",
            "description": "expense",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Expense"
            }
          },
          {
            "name": "userId",
            "in": "query",
            "description": "The unique identifier of the user performing the expected expense update",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Expense"
            }
          },
          "400": {
            "description": "Bad param(s):the request is invalid (no location found matching the country code and city name provided, invalid date, etc.)",
            "examples":{
              "application/json":{
                "errors":[
                  {
                    "errorCode":"invalidLocation",
                    "errorMessage":"The location cannot be resolved, no city found for countryCode=FR, sub-Country=null and cityName=MARSEILLES XXX"
                  }
                ]
              }
            },
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "description": "You do not have permission to perform this operation",
            "examples": {
              "application/json": {
                "errors": [
                  {
                    "errorCode": "permissionDenied",
                    "errorMessage": "Permission denied"
                  }
                ]
              }
            },
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "Not found - You tried to get a non-existing request.",
            "examples": {
              "application/json": {
                "errors": [
                  {
                    "errorCode": "notFound",
                    "errorMessage": "Resource not found"
                  }
                ]
              }
            },
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "An unexpected error has prevented the operation",
            "examples": {
              "application/json": {
                "errors": [
                  {
                    "errorCode": "internalServerError",
                    "errorMessage": "An unexpected error has prevented the operation"
                  }
                ]
              }
            },
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "503": {
            "description": "The service is currently unavailable",
            "examples": {
              "application/json": {
                "errors": [
                  {
                    "errorCode": "entityOffline",
                    "errorMessage": "Entity is offline, please try again later."
                  }
                ]
              }
            },
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Expected Expense Resource"
        ],
        "summary": "Delete an expected expense from the Request",
        "description": "Deletes an expected expense from the Request. Self-booked trip segments (created from the online Concur Travel booking tool) cannot be deleted from a Request, only Concur Travel may perform this action.",
        "operationId": "deleteUsingDELETE",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "expenseUuid",
            "in": "path",
            "description": "The unique identifier of the expected expense to delete",
            "required": true,
            "type": "string"
          },
          {
            "name": "userId",
            "in": "query",
            "description": "The unique identifier of the user performing the deletion of the expected expense",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "boolean"
            }
          },
          "400": {
            "description": "Bad param(s):the request is invalid",
            "examples":{
              "application/json":{
                "errors":[
                  {
                    "errorCode":"userNotFound",
                    "errorMessage":"User is not found"
                  }
                ]
              }
            },
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "description": "You do not have permission to perform this operation",
            "examples": {
              "application/json": {
                "errors": [
                  {
                    "errorCode": "permissionDenied",
                    "errorMessage": "Permission denied"
                  }
                ]
              }
            },
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "Not found - You tried to get a non-existing request.",
            "examples": {
              "application/json": {
                "errors": [
                  {
                    "errorCode": "notFound",
                    "errorMessage": "Resource not found"
                  }
                ]
              }
            },
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "An unexpected error has prevented the operation",
            "examples": {
              "application/json": {
                "errors": [
                  {
                    "errorCode": "internalServerError",
                    "errorMessage": "An unexpected error has prevented the operation"
                  }
                ]
              }
            },
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "503": {
            "description": "The service is currently unavailable",
            "examples": {
              "application/json": {
                "errors": [
                  {
                    "errorCode": "entityOffline",
                    "errorMessage": "Entity is offline, please try again later."
                  }
                ]
              }
            },
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/expenses/{expenseUuid}/comments": {
      "get": {
        "tags": [
          "Expected Expense Resource"
        ],
        "summary": "Get the list of comments for an existing expected expense",
        "description": "Provides the list of comments for an existing expected expense (information displayed in the `comment`field of the expected expense). Historization of comments is possible on an expected expense. This endpoint will provide all the comments written within an expected expense during the life of the Request.",
        "operationId": "getCommentsByExpenseUsingGET",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "expenseUuid",
            "in": "path",
            "description": "The unique identifier of the expected expense",
            "required": true,
            "type": "string"
          },
          {
            "name": "userId",
            "in": "query",
            "description": "The unique identifier of the user getting the content of the comments",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Comment"
              }
            }
          },
          "400": {
            "description": "Bad param(s) : the request is invalid.",
            "examples":{
              "application/json":{
                "errors":[
                  {
                    "errorCode":"userNotFound",
                    "errorMessage":"User is not found"
                  }
                ]
              }
            },
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "description": "You do not have permission to perform this operation",
            "examples": {
              "application/json": {
                "errors": [
                  {
                    "errorCode": "permissionDenied",
                    "errorMessage": "Permission denied"
                  }
                ]
              }
            },
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "An unexpected error has prevented the operation",
            "examples": {
              "application/json": {
                "errors": [
                  {
                    "errorCode": "internalServerError",
                    "errorMessage": "An unexpected error has prevented the operation"
                  }
                ]
              }
            },
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "503": {
            "description": "The service is currently unavailable",
            "examples": {
              "application/json": {
                "errors": [
                  {
                    "errorCode": "entityOffline",
                    "errorMessage": "Entity is offline, please try again later."
                  }
                ]
              }
            },
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/userpolicies": {
      "get": {
        "tags": [
          "Policy Resource"
        ],
        "summary": "Get the list of existing Request Policies for a given user",
        "description": "Provides the list of existing Request policies active for a given user.",
        "operationId": "getListForUserUsingGET",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "userId",
            "in": "query",
            "description": "The unique identifier of the user for whom the list of Request policies will be retrieved",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ResourceOfPolicy"
              }
            }
          },
          "400": {
            "description": "Bad param(s):the request is invalid",
            "examples":{
              "application/json":{
                "errors":[
                  {
                    "errorCode":"userNotFound",
                    "errorMessage":"User is not found"
                  }
                ]
              }
            },
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "description": "You do not have permission to perform this operation",
            "examples": {
              "application/json": {
                "errors": [
                  {
                    "errorCode": "permissionDenied",
                    "errorMessage": "Permission denied"
                  }
                ]
              }
            },
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "An unexpected error has prevented the operation",
            "examples": {
              "application/json": {
                "errors": [
                  {
                    "errorCode": "internalServerError",
                    "errorMessage": "An unexpected error has prevented the operation"
                  }
                ]
              }
            },
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "503": {
            "description": "The service is currently unavailable",
            "examples": {
              "application/json": {
                "errors": [
                  {
                    "errorCode": "entityOffline",
                    "errorMessage": "Entity is offline, please try again later."
                  }
                ]
              }
            },
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/travelagencies/{agencyUuid}": {
      "get": {
        "tags": [
          "Travel Agency Resource"
        ],
        "summary": "Get the description of a Travel Agency office",
        "description": "Provides a high-level description of an given Travel Agency Office.",
        "operationId": "getUsingGET_7",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "agencyUuid",
            "in": "path",
            "description": "The unique identifier of the Travel Agency",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ResourceOfTravelAgency"
            }
          },
          "400": {
            "description": "Bad param(s):the request is invalid",
            "examples":{
              "application/json":{
                "errors":[
                  {
                    "errorCode":"userNotFound",
                    "errorMessage":"User is not found"
                  }
                ]
              }
            },
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "description": "You do not have permission to perform this operation",
            "examples": {
              "application/json": {
                "errors": [
                  {
                    "errorCode": "permissionDenied",
                    "errorMessage": "Permission denied"
                  }
                ]
              }
            },
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "Not found - You tried to get a non-existing request",
            "examples": {
              "application/json": {
                "errors": [
                  {
                    "errorCode": "notFound",
                    "errorMessage": "Resource not found"
                  }
                ]
              }
            },
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "An unexpected error has prevented the operation",
            "examples": {
              "application/json": {
                "errors": [
                  {
                    "errorCode": "internalServerError",
                    "errorMessage": "An unexpected error has prevented the operation"
                  }
                ]
              }
            },
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "503": {
            "description": "The service is currently unavailable",
            "examples": {
              "application/json": {
                "errors": [
                  {
                    "errorCode": "entityOffline",
                    "errorMessage": "Entity is offline, please try again later."
                  }
                ]
              }
            },
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/cashadvances/{cashAdvanceUuid}": {
      "get": {
        "tags": [
          "Cash Advance Resource"
        ],
        "summary": "Get the content of an existing cash advance",
        "description": "Provides the content of an existing cash advance.",
        "operationId": "getUsingGET_1",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "cashAdvanceUuid",
            "in": "path",
            "description": "The unique identifier of the cash advance",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/CashAdvance"
            }
          },
          "400": {
            "description": "Bad param(s):the request is invalid",
            "examples":{
              "application/json":{
                "errors":[
                  {
                    "errorCode":"userNotFound",
                    "errorMessage":"User is not found"
                  }
                ]
              }
            },
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "description": "Principal is not allowed to perform operation",
            "examples": {
              "application/json": {
                "errors": [
                  {
                    "errorCode": "permissionDenied",
                    "errorMessage": "Permission denied"
                  }
                ]
              }
            },
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "Not found - You tried to get a non-existing request.",
            "examples": {
              "application/json": {
                "errors": [
                  {
                    "errorCode": "notFound",
                    "errorMessage": "Resource not found"
                  }
                ]
              }
            },
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "An unexpected error has prevented the operation",
            "examples": {
              "application/json": {
                "errors": [
                  {
                    "errorCode": "internalServerError",
                    "errorMessage": "An unexpected error has prevented the operation"
                  }
                ]
              }
            },
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "503": {
            "description": "The service is currently unavailable",
            "examples": {
              "application/json": {
                "errors": [
                  {
                    "errorCode": "entityOffline",
                    "errorMessage": "Entity is offline, please try again later."
                  }
                ]
              }
            },
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/v4/requests/{requestUuid}/agencyproposals": {
      "get": {
        "tags": [
          "Agency Proposal Resource"
        ],
        "summary": "Get the list of Agency Proposals for a Request",
        "description": "Provides the list of existing agency proposals within a Request.",
        "operationId": "getUsingGET",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "requestUuid",
            "in": "path",
            "description": "The unique identifier of the Request to which the agency proposals are attached",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/AgencyProposal"
              }
            }
          },
          "400": {
            "description": "Bad param(s) : the request is invalid",
            "examples": {
              "application/json": {
                "errors": [
                  {
                    "errorCode": "userNotFound",
                    "errorMessage": "User is not found"
                  }
                ]
              }
            },
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "description": "You do not have permission to perform this operation.",
            "examples": {
              "application/json": {
                "errors": [
                  {
                    "errorCode": "permissionDenied",
                    "errorMessage": "Permission denied"
                  }
                ]
              }
            },
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "examples": {
              "application/json": {
                "errors": [
                  {
                    "errorCode": "internalServerError",
                    "errorMessage": "An unexpected error has prevented the operation"
                  }
                ]
              }
            },
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "503": {
            "description": "The service is currently unavailable",
            "examples": {
              "application/json": {
                "errors": [
                  {
                    "errorCode": "entityOffline",
                    "errorMessage": "Entity is offline, please try again later."
                  }
                ]
              }
            },
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      },
      "post": {
        "tags": [
          "Agency Proposal Resource"
        ],
        "summary": "Create an Agency Proposal",
        "description": "Enables the import of agency proposals into a Request, those proposals will be available in the proposal comparison screen at the traveler level.",
        "operationId": "createUsingPOST",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "test",
            "in": "query",
            "description": "Enable test request partition",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "concur-correlationid",
            "in": "header",
            "description": "Client generated request identifier passed through all requests",
            "required": false,
            "type": "string"
          },
          {
            "name": "requestUuid",
            "in": "path",
            "description": "requestUuid",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "agencyProposal",
            "description": "agencyProposal",
            "required": true,
            "schema": {
              "$ref": "#/definitions/AgencyProposal"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/AgencyProposal"
            }
          },
          "400": {
            "description": "Bad param(s) : the request is invalid",
            "examples": {
              "application/json": {
                "errors": [
                  {
                    "errorCode": "userNotFound",
                    "errorMessage": "User is not found"
                  }
                ]
              }
            },
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "description": "You do not have permission to perform this operation.",
            "examples": {
              "application/json": {
                "errors": [
                  {
                    "errorCode": "permissionDenied",
                    "errorMessage": "Permission denied"
                  }
                ]
              }
            },
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "examples": {
              "application/json": {
                "errors": [
                  {
                    "errorCode": "internalServerError",
                    "errorMessage": "An unexpected error has prevented the operation"
                  }
                ]
              }
            },
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "503": {
            "description": "The service is currently unavailable",
            "examples": {
              "application/json": {
                "errors": [
                  {
                    "errorCode": "entityOffline",
                    "errorMessage": "Entity is offline, please try again later."
                  }
                ]
              }
            },
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    }
  },
  "definitions": {
    "AgencyProposal": {
      "type": "object",
      "required": [
        "agencyProposalEntries",
        "booked",
        "importDate"
      ],
      "properties": {
        "agencyProposalEntries": {
          "type": "array",
          "description": "List of the proposal entries",
          "items": {
            "$ref": "#/definitions/AgencyProposalEntry"
          }
        },
        "agencyProposalType": {
          "type": "string",
          "description": "The agency proposal type - equal API for generic proposition",
          "enum": [
            "CWTF",
            "AEBT",
            "API",
            "NONE"
          ]
        },
        "approvalLimitDate": {
          "type": "string",
          "description": "The date by which the Request must be approved. This element appears only when integrated with Concur Travel"
        },
        "autoSelect": {
          "type": "boolean",
          "example": false,
          "description": "The option AutoSelect allows to choose automatically a Proposal"
        },
        "booked": {
          "type": "boolean",
          "example": false,
          "description": "True if this trip is (or has to be) handled by a Travel Agency"
        },
        "comments": {
          "type": "string",
          "description": "Comment",
          "minLength": 0,
          "maxLength": 2000
        },
        "importDate": {
          "type": "string",
          "description": "The date of the import"
        },
        "itineraryLocator": {
          "type": "string",
          "description": "Itinerary Locator",
          "minLength": 0,
          "maxLength": 32
        },
        "policyCompliant": {
          "type": "boolean",
          "example": false,
          "description": "The policy Compliant"
        },
        "proposal": {
          "type": "boolean",
          "example": false,
          "description": "True if the status is proposal and false if the status is confirmed or Ticket issued"
        },
        "proposalBatchSize": {
          "type": "integer",
          "format": "int32",
          "description": "The size of the batch of Proposals imported.",
          "minimum": 1,
          "exclusiveMinimum": false
        },
        "proposalOrder": {
          "type": "integer",
          "format": "int32",
          "description": "The position of the Proposal",
          "minimum": 1,
          "exclusiveMinimum": false
        },
        "proposalUuid": {
          "type": "string",
          "description": "Unique identifier of Agency Proposal"
        },
        "providerMessageId": {
          "type": "string",
          "description": "The provider Message Id",
          "minLength": 0,
          "maxLength": 32
        },
        "selected": {
          "type": "boolean",
          "example": false,
          "description": "True if the Traveler has selected the current Proposal"
        },
        "status": {
          "type": "string",
          "description": "The status send in the proposal equal [proposal] or [confirmed] or [ticketissue]",
          "enum": [
            "PROPOSAL",
            "CONFIRMED",
            "TICKETISSUED"
          ]
        },
        "totalPostedAmount": {
          "description": "The total Amount of the proposal",
          "$ref": "#/definitions/Amount"
        }
      }
    },
    "AgencyProposalEntry": {
      "type": "object",
      "required": [
        "agencyProposalSegments",
        "transactionDate"
      ],
      "properties": {
        "agencyProposalSegments": {
          "type": "array",
          "description": "List of the segments composing this entry",
          "items": {
            "$ref": "#/definitions/AgencyProposalSegment"
          }
        },
        "comments": {
          "type": "string",
          "description": "Legs comments"
        },
        "exchangeRate": {
          "description": "The exchange rate that applies to the Proposal Segment amount",
          "$ref": "#/definitions/ExchangeRate"
        },
        "matchingExpense": {
          "description": "The expense link",
          "$ref": "#/definitions/ResourceLink"
        },
        "proposalEntryUuid": {
          "type": "string",
          "description": "Unique Identifier of Agency Proposal entry receive"
        },
        "transactionAmount": {
          "description": "The amount of the Proposal Entry",
          "$ref": "#/definitions/Amount"
        },
        "transactionDate": {
          "type": "string",
          "description": "The date of the transaction"
        }
      }
    },
    "AgencyProposalSegment": {
      "type": "object",
      "required": [
        "booked",
        "confirmationNumber",
        "pnr",
        "proposalSegmentType",
        "vendorName"
      ],
      "properties": {
        "booked": {
          "type": "boolean",
          "example": false,
          "description": "True if this travel is (or has to be) handled by a travel agency"
        },
        "comments": {
          "type": "string",
          "description": "A comments for this Proposal Segment",
          "minLength": 0,
          "maxLength": 2000
        },
        "confirmationNumber": {
          "type": "string",
          "description": "The number of the confirmation of this Proposal Segment",
          "minLength": 0,
          "maxLength": 32
        },
        "endDate": {
          "type": "string",
          "description": "The end date of the Proposal Segment (in the format YYYY-MM-DD).It represents the arrival date of AIRFR and TRAIN segments, check out date for HOTEL or drop off for CARRT"
        },
        "endTime": {
          "type": "string",
          "description": "The end time of the Proposal Segment (in the format HH:MM). It is expressed in the local time of the endLocation"
        },
        "matchingSegmentLeg": {
          "description": "The Segment Leg link",
          "$ref": "#/definitions/ResourceLink"
        },
        "pnr": {
          "type": "string",
          "description": "PNR of the proposal",
          "minLength": 1,
          "maxLength": 32
        },
        "policyCompliant": {
          "type": "boolean",
          "example": false,
          "description": "The policy Compliant"
        },
        "policyCompliantLevel": {
          "type": "integer",
          "format": "int32",
          "description": "The policy Compliant Level",
          "minimum": 0,
          "maximum": 100,
          "exclusiveMinimum": false,
          "exclusiveMaximum": false
        },
        "proposalSegmentType": {
          "type": "string",
          "description": "The proposal type : AIR, RAIL, CAR, HOTEL or MISC of this Proposal Segment",
          "enum": [
            "AIR",
            "RAIL",
            "CAR",
            "HOTEL",
            "MISC"
          ]
        },
        "proposalSegmentUuid": {
          "type": "string",
          "description": "Unique Identifier of Agency Proposal Segment receive"
        },
        "segmentTypeCode": {
          "type": "string",
          "description": "The segment type : AIRFR, RAILF, CARRT, HOTEL or MISC of this Proposal Segment",
          "enum": [
            "AIRFR",
            "CARRT",
            "HOTEL",
            "LIMOF",
            "TAXIF",
            "MISC",
            "PARKG",
            "DININ",
            "EVENT",
            "OTHER",
            "VISA",
            "INSUR",
            "AIRSU",
            "RAISU",
            "RAILF"
          ]
        },
        "startDate": {
          "type": "string",
          "description": "The start date of the Proposal Segment (in the format YYYY-MM-DD).It represents the departure date of AIRFR and TRAIN segments, check in date for HOTEL or pickup for CARRT"
        },
        "startTime": {
          "type": "string",
          "description": "The start time of the proposal segment (in the format HH:MM). It is expressed in the local time of the startLocation\""
        },
        "timeZone": {
          "description": "The timezone. Either in UTC/GMT + offset format or matching TZDB names.",
          "$ref": "#/definitions/ZoneId"
        },
        "vendorName": {
          "type": "string",
          "description": "The name of the vendor of this Proposal Segment.",
          "minLength": 0,
          "maxLength": 64
        }
      }
    },
    "Allocation": {
      "type": "object",
      "properties": {
        "allocationAmount": {
          "description": "The amount of the allocation calculated with the percentage value multiplied by the transaction amount on the expense. This amount is given in the transaction's currency",
          "$ref": "#/definitions/Amount"
        },
        "allocationId": {
          "type": "string",
          "description": "The unique allocation identifier."
        },
        "approvedAmount": {
          "description": "The amount of the allocation calculated with the percentage value multiplied by the approved amount on the expense. This amount is given in the user's currency",
          "$ref": "#/definitions/Amount"
        },
        "custom1": {
          "description": "The details from the Custom fields. These fields may not have data, depending on the configuration",
          "$ref": "#/definitions/CustomField"
        },
        "custom10": {
          "description": "The details from the Custom fields. These fields may not have data, depending on the configuration",
          "$ref": "#/definitions/CustomField"
        },
        "custom11": {
          "description": "The details from the Custom fields. These fields may not have data, depending on the configuration",
          "$ref": "#/definitions/CustomField"
        },
        "custom12": {
          "description": "The details from the Custom fields. These fields may not have data, depending on the configuration",
          "$ref": "#/definitions/CustomField"
        },
        "custom13": {
          "description": "The details from the Custom fields. These fields may not have data, depending on the configuration",
          "$ref": "#/definitions/CustomField"
        },
        "custom14": {
          "description": "The details from the Custom fields. These fields may not have data, depending on the configuration",
          "$ref": "#/definitions/CustomField"
        },
        "custom15": {
          "description": "The details from the Custom fields. These fields may not have data, depending on the configuration",
          "$ref": "#/definitions/CustomField"
        },
        "custom16": {
          "description": "The details from the Custom fields. These fields may not have data, depending on the configuration",
          "$ref": "#/definitions/CustomField"
        },
        "custom17": {
          "description": "The details from the Custom fields. These fields may not have data, depending on the configuration",
          "$ref": "#/definitions/CustomField"
        },
        "custom18": {
          "description": "The details from the Custom fields. These fields may not have data, depending on the configuration",
          "$ref": "#/definitions/CustomField"
        },
        "custom19": {
          "description": "The details from the Custom fields. These fields may not have data, depending on the configuration",
          "$ref": "#/definitions/CustomField"
        },
        "custom2": {
          "description": "The details from the Custom fields. These fields may not have data, depending on the configuration",
          "$ref": "#/definitions/CustomField"
        },
        "custom20": {
          "description": "The details from the Custom fields. These fields may not have data, depending on the configuration",
          "$ref": "#/definitions/CustomField"
        },
        "custom3": {
          "description": "The details from the Custom fields. These fields may not have data, depending on the configuration",
          "$ref": "#/definitions/CustomField"
        },
        "custom4": {
          "description": "The details from the Custom fields. These fields may not have data, depending on the configuration",
          "$ref": "#/definitions/CustomField"
        },
        "custom5": {
          "description": "The details from the Custom fields. These fields may not have data, depending on the configuration",
          "$ref": "#/definitions/CustomField"
        },
        "custom6": {
          "description": "The details from the Custom fields. These fields may not have data, depending on the configuration",
          "$ref": "#/definitions/CustomField"
        },
        "custom7": {
          "description": "The details from the Custom fields. These fields may not have data, depending on the configuration",
          "$ref": "#/definitions/CustomField"
        },
        "custom8": {
          "description": "The details from the Custom fields. These fields may not have data, depending on the configuration",
          "$ref": "#/definitions/CustomField"
        },
        "custom9": {
          "description": "The details from the Custom fields. These fields may not have data, depending on the configuration",
          "$ref": "#/definitions/CustomField"
        },
        "expenseId": {
          "type": "string",
          "description": "The unique identifier of the expense associated with the allocation"
        },
        "percentEdited": {
          "type": "boolean",
          "example": false,
          "description": "Whether the allocation percent has been edited"
        },
        "percentage": {
          "type": "number",
          "description": "The percentage of the total expense that this allocation represents"
        },
        "postedAmount": {
          "description": "The amount of the allocation calculated with the percentage value multiplied by the posted amount on the expense. This amount is given in the user's currency",
          "$ref": "#/definitions/Amount"
        },
        "systemAllocation": {
          "type": "boolean",
          "example": false,
          "description": "Whether the allocation is a system allocation. It is usually hidden or read only for Request users"
        }
      }
    },
    "Amount": {
      "type": "object",
      "required": [
        "currency",
        "value"
      ],
      "properties": {
        "currency": {
          "type": "string",
          "description": "The 3-letter ISO 4217 code of the currency in which the amount is expressed",
          "minLength": 1,
          "maxLength": 2147483647
        },
        "value": {
          "type": "number",
          "description": "The amount in the defined currency",
          "minimum": 1,
          "maximum": 2147483647
        }
      }
    },
    "ApprovalStatus": {
      "type": "object",
      "properties": {
        "code": {
          "type": "string",
          "description": "The code of the approval status of the Request",
          "minLength": 1,
          "maxLength": 2147483647,
          "enum": [
            "APPROVED",
            "CANCELED",
            "NOT_SUBMITTED",
            "PENDING_BOOKING",
            "SENTBACK",
            "SUBMITTED"
          ]
        },
        "name": {
          "type": "string",
          "description": "The approval status of the Request in the current user's language",
          "minLength": 1,
          "maxLength": 2147483647
        }
      }
    },
    "CashAdvance": {
      "type": "object",
      "properties": {
        "amountRequested": {
          "description": "The amount of the cash advance in the Request, expressed in the reimbursement currency of the employee at the time they created the cash advance",
          "$ref": "#/definitions/Amount"
        },
        "approvalStatus": {
          "description": "The approval status of the cash advance",
          "$ref": "#/definitions/CashAdvanceApprovalStatus"
        },
        "cashAdvanceId": {
          "type": "string",
          "description": "The unique identifier of the cash advance"
        },
        "comment": {
          "type": "string",
          "description": "The last comment related to this cash advance"
        },
        "exchangeRate": {
          "description": "The exchange rate that applies to the cash advance",
          "$ref": "#/definitions/ExchangeRate"
        },
        "issueDate": {
          "type": "string",
          "description": "The date the cash advance was issued"
        },
        "requestDate": {
          "type": "string",
          "description": "The date the cash advance was submitted (last submit date in case of recall)"
        }
      }
    },
    "CashAdvanceApprovalStatus": {
      "type": "object",
      "properties": {
        "code": {
          "type": "string",
          "description": "The code of the approval status of the cash advance",
          "minLength": 1,
          "maxLength": 2147483647,
          "enum": [
            "C_APPR",
            "C_COMP",
            "C_FILE",
            "C_ISSU",
            "C_NISU",
            "C_NOTF",
            "C_PECA",
            "C_PEND",
            "C_REJE"
          ]
        },
        "name": {
          "type": "string",
          "description": "The approval status of the Cash Advance",
          "minLength": 1,
          "maxLength": 2147483647
        }
      }
    },
    "Comment": {
      "type": "object",
      "properties": {
        "author": {
          "description": "Author of the comment",
          "$ref": "#/definitions/Employee"
        },
        "creationDateTime": {
          "type": "string",
          "description": "Creation date of the comment (in the format YYYY-MM-DD HH:mm:ss.SSS)"
        },
        "isLatest": {
          "type": "boolean",
          "example": false,
          "description": "True when the comment has been edited since the last workflow transition"
        },
        "value": {
          "type": "string",
          "description": "Comment value"
        }
      }
    },
    "CustomField": {
      "type": "object",
      "properties": {
        "code": {
          "type": "string",
          "description": "The short code of the list item. For non-list fields, this value will be blank"
        },
        "href": {
          "type": "string",
          "description": "The link to get this list item on the list service."
        },
        "value": {
          "type": "string",
          "description": "The value of the custom field or the value of the list item id for list fields"
        }
      }
    },
    "Duration": {
      "description": "A time-based amount of time.",
      "type": "object",
      "properties": {
        "nano": {
          "description": "The number of nanoseconds within the second in this duration.",
          "type": "integer",
          "format": "int32"
        },
        "negative": {
          "description": "If this duration is negative, excluding zero.",
          "type": "boolean"
        },
        "seconds": {
          "description": "The number of seconds in this duration.",
          "type": "integer",
          "format": "int64"
        },
        "units": {
          "description": "The set of units supported by this duration.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/TemporalUnit"
          }
        },
        "zero": {
          "description": "If this duration is zero length.",
          "type": "boolean"
        }
      }
    },
    "Employee": {
      "type": "object",
      "properties": {
        "firstName": {
          "type": "string",
          "description": "The first name of the employee"
        },
        "middleInitial": {
          "type": "string",
          "description": "The middle initial of the employee"
        },
        "href": {
          "type": "string",
          "description": "Hyperlink to the resource"
        },
        "id": {
          "type": "string",
          "description": "Unique identifier of the related object"
        },
        "lastName": {
          "type": "string",
          "description": "The last name of the employee"
        },
        "template": {
          "type": "string",
          "description": "Hyperlink template to the resource"
        }
      }
    },
    "Expense": {
      "type": "object",
      "required": [
        "transactionDate"
      ],
      "properties": {
        "allocations": {
          "type": "array",
          "description": "List of the allocations composing this segment",
          "items": {
            "$ref": "#/definitions/Allocation"
          }
        },
        "approvedAmount": {
          "description": "The approved amount of the expected expense",
          "$ref": "#/definitions/Amount"
        },
        "budgetAccrualDate": {
          "type": "string",
          "description": "The date to determine which budgets are affected (in the format yyyy-MM-dd’T’HH:mm:ss.SSS’Z’)",
          "example": "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'"
        },
        "businessPurpose": {
          "type": "string",
          "description": "The purpose of the expected expense"
        },
        "comments": {
          "description": "Comment history of the expected expense",
          "$ref": "#/definitions/ResourceLink"
        },
        "custom1": {
          "description": "The details from the Custom fields. These fields may not have data, depending on the configuration",
          "$ref": "#/definitions/CustomField"
        },
        "custom10": {
          "description": "The details from the Custom fields. These fields may not have data, depending on the configuration",
          "$ref": "#/definitions/CustomField"
        },
        "custom11": {
          "description": "The details from the Custom fields. These fields may not have data, depending on the configuration",
          "$ref": "#/definitions/CustomField"
        },
        "custom12": {
          "description": "The details from the Custom fields. These fields may not have data, depending on the configuration",
          "$ref": "#/definitions/CustomField"
        },
        "custom13": {
          "description": "The details from the Custom fields. These fields may not have data, depending on the configuration",
          "$ref": "#/definitions/CustomField"
        },
        "custom14": {
          "description": "The details from the Custom fields. These fields may not have data, depending on the configuration",
          "$ref": "#/definitions/CustomField"
        },
        "custom15": {
          "description": "The details from the Custom fields. These fields may not have data, depending on the configuration",
          "$ref": "#/definitions/CustomField"
        },
        "custom16": {
          "description": "The details from the Custom fields. These fields may not have data, depending on the configuration",
          "$ref": "#/definitions/CustomField"
        },
        "custom17": {
          "description": "The details from the Custom fields. These fields may not have data, depending on the configuration",
          "$ref": "#/definitions/CustomField"
        },
        "custom18": {
          "description": "The details from the Custom fields. These fields may not have data, depending on the configuration",
          "$ref": "#/definitions/CustomField"
        },
        "custom19": {
          "description": "The details from the Custom fields. These fields may not have data, depending on the configuration",
          "$ref": "#/definitions/CustomField"
        },
        "custom2": {
          "description": "The details from the Custom fields. These fields may not have data, depending on the configuration",
          "$ref": "#/definitions/CustomField"
        },
        "custom20": {
          "description": "The details from the Custom fields. These fields may not have data, depending on the configuration",
          "$ref": "#/definitions/CustomField"
        },
        "custom21": {
          "description": "The details from the Custom fields. These fields may not have data, depending on the configuration",
          "$ref": "#/definitions/CustomField"
        },
        "custom22": {
          "description": "The details from the Custom fields. These fields may not have data, depending on the configuration",
          "$ref": "#/definitions/CustomField"
        },
        "custom23": {
          "description": "The details from the Custom fields. These fields may not have data, depending on the configuration",
          "$ref": "#/definitions/CustomField"
        },
        "custom24": {
          "description": "The details from the Custom fields. These fields may not have data, depending on the configuration",
          "$ref": "#/definitions/CustomField"
        },
        "custom25": {
          "description": "The details from the Custom fields. These fields may not have data, depending on the configuration",
          "$ref": "#/definitions/CustomField"
        },
        "custom26": {
          "description": "The details from the Custom fields. These fields may not have data, depending on the configuration",
          "$ref": "#/definitions/CustomField"
        },
        "custom27": {
          "description": "The details from the Custom fields. These fields may not have data, depending on the configuration",
          "$ref": "#/definitions/CustomField"
        },
        "custom28": {
          "description": "The details from the Custom fields. These fields may not have data, depending on the configuration",
          "$ref": "#/definitions/CustomField"
        },
        "custom29": {
          "description": "The details from the Custom fields. These fields may not have data, depending on the configuration",
          "$ref": "#/definitions/CustomField"
        },
        "custom3": {
          "description": "The details from the Custom fields. These fields may not have data, depending on the configuration",
          "$ref": "#/definitions/CustomField"
        },
        "custom30": {
          "description": "The details from the Custom fields. These fields may not have data, depending on the configuration",
          "$ref": "#/definitions/CustomField"
        },
        "custom31": {
          "description": "The details from the Custom fields. These fields may not have data, depending on the configuration",
          "$ref": "#/definitions/CustomField"
        },
        "custom32": {
          "description": "The details from the Custom fields. These fields may not have data, depending on the configuration",
          "$ref": "#/definitions/CustomField"
        },
        "custom33": {
          "description": "The details from the Custom fields. These fields may not have data, depending on the configuration",
          "$ref": "#/definitions/CustomField"
        },
        "custom34": {
          "description": "The details from the Custom fields. These fields may not have data, depending on the configuration",
          "$ref": "#/definitions/CustomField"
        },
        "custom35": {
          "description": "The details from the Custom fields. These fields may not have data, depending on the configuration",
          "$ref": "#/definitions/CustomField"
        },
        "custom36": {
          "description": "The details from the Custom fields. These fields may not have data, depending on the configuration",
          "$ref": "#/definitions/CustomField"
        },
        "custom37": {
          "description": "The details from the Custom fields. These fields may not have data, depending on the configuration",
          "$ref": "#/definitions/CustomField"
        },
        "custom38": {
          "description": "The details from the Custom fields. These fields may not have data, depending on the configuration",
          "$ref": "#/definitions/CustomField"
        },
        "custom39": {
          "description": "The details from the Custom fields. These fields may not have data, depending on the configuration",
          "$ref": "#/definitions/CustomField"
        },
        "custom4": {
          "description": "The details from the Custom fields. These fields may not have data, depending on the configuration",
          "$ref": "#/definitions/CustomField"
        },
        "custom40": {
          "description": "The details from the Custom fields. These fields may not have data, depending on the configuration",
          "$ref": "#/definitions/CustomField"
        },
        "custom5": {
          "description": "The details from the Custom fields. These fields may not have data, depending on the configuration",
          "$ref": "#/definitions/CustomField"
        },
        "custom6": {
          "description": "The details from the Custom fields. These fields may not have data, depending on the configuration",
          "$ref": "#/definitions/CustomField"
        },
        "custom7": {
          "description": "The details from the Custom fields. These fields may not have data, depending on the configuration",
          "$ref": "#/definitions/CustomField"
        },
        "custom8": {
          "description": "The details from the Custom fields. These fields may not have data, depending on the configuration",
          "$ref": "#/definitions/CustomField"
        },
        "custom9": {
          "description": "The details from the Custom fields. These fields may not have data, depending on the configuration",
          "$ref": "#/definitions/CustomField"
        },
        "exchangeRate": {
          "description": "The exchange rate that applies to the expected expense",
          "$ref": "#/definitions/ExchangeRate"
        },
        "expenseType": {
          "description": "The expense type of the expected expense",
          "$ref": "#/definitions/ExpenseType"
        },
        "href": {
          "type": "string"
        },
        "id": {
          "type": "string",
          "description": "The unique identifier of the expected expense"
        },
        "lastComment": {
          "type": "string",
          "description": "The last comment of the expected expense"
        },
        "lastModifiedDate": {
          "type": "string",
          "description": "The date when this expense was last modified"
        },
        "location": {
          "description": "The location of the expected expense",
          "$ref": "#/definitions/Location"
        },
        "orgUnit1": {
          "description": "The details from the Custom fields. These fields may not have data, depending on the configuration",
          "$ref": "#/definitions/CustomField"
        },
        "orgUnit2": {
          "description": "The details from the Custom fields. These fields may not have data, depending on the configuration",
          "$ref": "#/definitions/CustomField"
        },
        "orgUnit3": {
          "description": "The details from the Custom fields. These fields may not have data, depending on the configuration",
          "$ref": "#/definitions/CustomField"
        },
        "orgUnit4": {
          "description": "The details from the Custom fields. These fields may not have data, depending on the configuration",
          "$ref": "#/definitions/CustomField"
        },
        "orgUnit5": {
          "description": "The details from the Custom fields. These fields may not have data, depending on the configuration",
          "$ref": "#/definitions/CustomField"
        },
        "orgUnit6": {
          "description": "The details from the Custom fields. These fields may not have data, depending on the configuration",
          "$ref": "#/definitions/CustomField"
        },
        "parentRequest": {
          "description": "The parent Request of the expected expense",
          "$ref": "#/definitions/ResourceLink"
        },
        "postedAmount": {
          "description": "The posted amount of the expected expense",
          "$ref": "#/definitions/Amount"
        },
        "remainingAmount": {
          "description": "The remaining amount of the expected expense",
          "$ref": "#/definitions/Amount"
        },
        "source": {
          "type": "string",
          "description": "The source that created the expected expense. It can be CASH_ADVANCE or TRAVEL_ALLOWANCE. This field will be empty in any other case.",
          "enum": [
            "CASH_ADVANCE",
            "TRAVEL_ALLOWANCE",
            "AGENCY_FEE"
          ]
        },
        "transactionAmount": {
          "description": "The amount of the expected expense, in the transaction currency paid to the vendor",
          "$ref": "#/definitions/Amount"
        },
        "transactionDate": {
          "type": "string",
          "description": "The date of the transaction"
        },
        "travelAllowance": {
          "description": "The travel allowance",
          "$ref": "#/definitions/TravelAllowance"
        },
        "tripData": {
          "description": "This property is non empty if this expected expense represents a travel Segment (AIR, CAR, HOTEL, ...)",
          "$ref": "#/definitions/TripData"
        },
        "vendor": {
          "description": "The vendor of the expected expense",
          "$ref": "#/definitions/Vendor"
        }
      }
    },
    "ExceptionSource": {
      "type": "object",
      "properties": {
        "href": {
          "type": "string",
          "description": "The link to the unique identifier of source. Will be empty if source is ALLOCATION or CASH_ADVANCE."
        },
        "id": {
          "type": "string",
          "description": "The unique identifier of the source"
        },
        "type": {
          "type": "string",
          "description": "Defines the type of the source which can be one of \"ALLOCATION\", \"CASH_ADVANCE\", \"EXPENSE\", \"HEADER\"",
          "enum": [
            "ALLOCATION",
            "CASH_ADVANCE",
            "EXPENSE",
            "HEADER"
          ]
        }
      }
    },
    "ExchangeRate": {
      "type": "object",
      "required": [
        "operation",
        "value"
      ],
      "properties": {
        "operation": {
          "type": "string",
          "description": "Exchange rate operation. Possible values: 'MULTIPLY' or 'DIVIDE'",
          "enum": [
            "MULTIPLY",
            "DIVIDE"
          ]
        },
        "value": {
          "type": "number",
          "description": "Exchange rate value"
        }
      }
    },
    "ExpenseType": {
      "type": "object",
      "required": [
        "id"
      ],
      "properties": {
        "href": {
          "type": "string",
          "description": "Hyperlink to the resource for the expense type definition"
        },
        "id": {
          "type": "string",
          "description": "Unique identifier of the expense type"
        },
        "name": {
          "type": "string",
          "description": "Name of the expense type"
        }
      }
    },
    "ErrorResponse": {
      "type": "object",
      "properties": {
        "errors": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ErrorResponseDetails"
          }
        }
      }
    },
    "ErrorResponseDetails": {
      "type": "object",
      "properties": {
        "errorCode": {
          "type": "string",
          "description": "An error code."
        },
        "errorMessage": {
          "type": "string",
          "description": "An error message."
        }
      }
    },
    "Link": {
      "type": "object",
      "properties": {
        "href": {
          "type": "string",
          "description": "Hyperlink to the resource."
        },
        "rel": {
          "type": "string",
          "description": "Relation type as defined by the server."
        }
      }
    },
    "ListItemField": {
      "type": "object",
      "properties": {
        "code": {
          "type": "string",
          "description": "The short code of the list item."
        },
        "href": {
          "type": "string",
          "description": "Hyperlink to the resource for the list item."
        },
        "value": {
          "type": "string",
          "description": "The value of the list item id."
        }
      }
    },
    "LocalTime": {
      "description": "The local time of day of the transition.",
      "type": "object",
      "properties": {
        "hour": {
          "description": "The hour-of-day field.",
          "type": "integer",
          "format": "int32"
        },
        "minute": {
          "description": "The minute-of-hour field.",
          "type": "integer",
          "format": "int32"
        },
        "nano": {
          "description": "The nano-of-second field.",
          "type": "integer",
          "format": "int32"
        },
        "second": {
          "description": "The second-of-minute field.",
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "Location": {
      "type": "object",
      "properties": {
        "city": {
          "type": "string",
          "description": "The city name of the location"
        },
        "countryCode": {
          "type": "string",
          "description": "The ISO 3166-1 country code"
        },
        "countrySubDivisionCode": {
          "type": "string",
          "description": "The ISO 3166-2 country sub code"
        },
        "iataCode": {
          "type": "string",
          "description": "The IATA code for the location"
        },
        "id": {
          "type": "string",
          "description": "The id of the location"
        },
        "latitude": {
          "type": "number",
          "description": "The latitude of the location"
        },
        "locationCode": {
          "type": "string",
          "description": "The code of the location"
        },
        "locationType": {
          "type": "string",
          "description": "The type of the location"
        },
        "longitude": {
          "type": "number",
          "description": "The longitude of the location"
        },
        "name": {
          "type": "string",
          "description": "The name of the location"
        }
      }
    },
    "PageResultOfResourceOfRequest": {
      "type": "object",
      "properties": {
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Request"
          }
        },
        "operations": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Link"
          }
        }
      }
    },
    "Request": {
      "type": "object",
      "properties": {
        "approvalLimitDate": {
          "type": "string",
          "description": "The date by which the Request must be approved. This element appears only when integrated with Concur Travel"
        },
        "approvalStatus": {
          "description": "The approval status of the Request",
          "$ref": "#/definitions/ApprovalStatus"
        },
        "approved": {
          "type": "boolean",
          "description": "Indicates whether this Request is approved"
        },
        "approver": {
          "description": "The approver of this Request. Null when Request is in an approval status different from SUBMITTED",
          "$ref": "#/definitions/Employee"
        },
        "authorizedDate": {
          "type": "string",
          "description": "For an approved Request, the date the approval process was completed"
        },
        "businessPurpose": {
          "type": "string",
          "description": "The business purpose of the Request"
        },
        "canceledPostApproval": {
          "type": "boolean",
          "description": "Indicates whether this Request was canceled post approval"
        },
        "closed": {
          "type": "boolean",
          "example": false,
          "description": "Indicates whether the Request is closed"
        },
        "comment": {
          "type": "string",
          "description": "The last comment attached to this Request"
        },
        "comments": {
          "description": "Comment history of this Request",
          "$ref": "#/definitions/ResourceLink"
        },
        "creationDate": {
          "type": "string",
          "description": "The date when the Request was created (in the format yyyy-MM-dd'T'HH:mm:ss.SSS'Z')"
        },
        "custom1": {
          "description": "The details from the Custom fields. These fields may not have data, depending on the configuration",
          "$ref": "#/definitions/CustomField"
        },
        "custom10": {
          "description": "The details from the Custom fields. These fields may not have data, depending on the configuration",
          "$ref": "#/definitions/CustomField"
        },
        "custom11": {
          "description": "The details from the Custom fields. These fields may not have data, depending on the configuration",
          "$ref": "#/definitions/CustomField"
        },
        "custom12": {
          "description": "The details from the Custom fields. These fields may not have data, depending on the configuration",
          "$ref": "#/definitions/CustomField"
        },
        "custom13": {
          "description": "The details from the Custom fields. These fields may not have data, depending on the configuration",
          "$ref": "#/definitions/CustomField"
        },
        "custom14": {
          "description": "The details from the Custom fields. These fields may not have data, depending on the configuration",
          "$ref": "#/definitions/CustomField"
        },
        "custom15": {
          "description": "The details from the Custom fields. These fields may not have data, depending on the configuration",
          "$ref": "#/definitions/CustomField"
        },
        "custom16": {
          "description": "The details from the Custom fields. These fields may not have data, depending on the configuration",
          "$ref": "#/definitions/CustomField"
        },
        "custom17": {
          "description": "The details from the Custom fields. These fields may not have data, depending on the configuration",
          "$ref": "#/definitions/CustomField"
        },
        "custom18": {
          "description": "The details from the Custom fields. These fields may not have data, depending on the configuration",
          "$ref": "#/definitions/CustomField"
        },
        "custom19": {
          "description": "The details from the Custom fields. These fields may not have data, depending on the configuration",
          "$ref": "#/definitions/CustomField"
        },
        "custom2": {
          "description": "The details from the Custom fields. These fields may not have data, depending on the configuration",
          "$ref": "#/definitions/CustomField"
        },
        "custom20": {
          "description": "The details from the Custom fields. These fields may not have data, depending on the configuration",
          "$ref": "#/definitions/CustomField"
        },
        "custom3": {
          "description": "The details from the Custom fields. These fields may not have data, depending on the configuration",
          "$ref": "#/definitions/CustomField"
        },
        "custom4": {
          "description": "The details from the Custom fields. These fields may not have data, depending on the configuration",
          "$ref": "#/definitions/CustomField"
        },
        "custom5": {
          "description": "The details from the Custom fields. These fields may not have data, depending on the configuration",
          "$ref": "#/definitions/CustomField"
        },
        "custom6": {
          "description": "The details from the Custom fields. These fields may not have data, depending on the configuration",
          "$ref": "#/definitions/CustomField"
        },
        "custom7": {
          "description": "The details from the Custom fields. These fields may not have data, depending on the configuration",
          "$ref": "#/definitions/CustomField"
        },
        "custom8": {
          "description": "The details from the Custom fields. These fields may not have data, depending on the configuration",
          "$ref": "#/definitions/CustomField"
        },
        "custom9": {
          "description": "The details from the Custom fields. These fields may not have data, depending on the configuration",
          "$ref": "#/definitions/CustomField"
        },
        "endDate": {
          "type": "string",
          "description": "The end date of the Request (in the format YYYY-MM-DD)"
        },
        "endTime": {
          "type": "string",
          "description": "The end time of the Request (in the format HH:MM)"
        },
        "everSentBack": {
          "type": "boolean",
          "example": false,
          "description": "Indicates whether the Request has ever been sent back to the employee"
        },
        "expenses": {
          "type": "array",
          "description": "Expected expenses attached to this Request",
          "items": {
            "$ref": "#/definitions/ResourceLink"
          }
        },
        "extensionOf": {
          "description": "The Request that this Request is an extension of, or addendum to",
          "$ref": "#/definitions/RequestLink"
        },
        "highestExceptionLevel": {
          "type": "string",
          "description": "The highest level of exception contained in this Request. One of { NONE, WARNING, ERROR }",
          "enum": [
            "NONE",
            "WARNING",
            "ERROR"
          ]
        },
        "href": {
          "type": "string",
          "description": "Hyperlink to the resource for this Request"
        },
        "id": {
          "type": "string",
          "description": "The unique identifier of the Request"
        },
        "lastModified": {
          "type": "string",
          "description": "The date when the Request was last modified"
        },
        "mainDestination": {
          "description": "The main destination of the Request",
          "$ref": "#/definitions/Location"
        },
        "name": {
          "type": "string",
          "description": "The name of the Request"
        },
        "operations": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Link"
          }
        },
        "owner": {
          "description": "The employee who owns the Request",
          "$ref": "#/definitions/Employee"
        },
        "pendingApproval": {
          "type": "boolean",
          "description": "Indicates whether this Request is pending approval"
        },
        "policy": {
          "description": "The policy that applies to the Request",
          "$ref": "#/definitions/ResourceLink"
        },
        "requestId": {
          "type": "string",
          "description": "The public key of the Request (unique per customer)"
        },
        "startDate": {
          "type": "string",
          "description": "The start date of the Request (in the format YYYY-MM-DD)"
        },
        "startTime": {
          "type": "string",
          "description": "The start time of the Request (in the format HH:MM)"
        },
        "submitDate": {
          "type": "string",
          "description": "The date when the Request was submitted (last submit date in case of recall)"
        },
        "totalApprovedAmount": {
          "description": "The total amount of approved expenses in the Request, expressed in the reimbursement currency of the employee at the time they created the Request",
          "$ref": "#/definitions/Amount"
        },
        "totalPostedAmount": {
          "description": "The total amount of the Request, expressed in the reimbursement currency of the employee at the time he created the Request",
          "$ref": "#/definitions/Amount"
        },
        "totalRemainingAmount": {
          "description": "The total amount not included in an Expense report, expressed in the reimbursement currency of the employee at the time he created the Request",
          "$ref": "#/definitions/Amount"
        },
        "travelAgency": {
          "description": "The travel agency office that is managing the trip associated to this Request",
          "$ref": "#/definitions/ResourceLink"
        },
        "type": {
          "description": "The type of the Request, inherited from the Request policy type",
          "$ref": "#/definitions/RequestType"
        }
      }
    },
    "RequestDetails": {
      "type": "object",
      "properties": {
        "approvalLimitDate": {
          "type": "string",
          "description": "The date by which the Request must be approved. This element appears only when integrated with Concur Travel"
        },
        "approvalStatus": {
          "description": "The approval status of the Request",
          "$ref": "#/definitions/ApprovalStatus"
        },
        "approved": {
          "type": "boolean",
          "description": "Indicates whether this Request is approved"
        },
        "approver": {
          "description": "The approver of this Request. Null when Request is in an approval status different from SUBMITTED",
          "$ref": "#/definitions/Employee"
        },
        "authorizedDate": {
          "type": "string",
          "description": "For an approved Request, the date the approval process was completed"
        },
        "businessPurpose": {
          "type": "string",
          "description": "The business purpose of the Request"
        },
        "canceledPostApproval": {
          "type": "boolean",
          "description": "Indicates whether this Request was canceled post approval"
        },
        "cashAdvances": {
          "description": "The cash advances attached to this Request",
          "$ref": "#/definitions/ResourceLink"
        },
        "closed": {
          "type": "boolean",
          "example": false,
          "description": "Indicates whether the Request is closed"
        },
        "comment": {
          "type": "string",
          "description": "The last comment attached to this Request"
        },
        "comments": {
          "description": "Comment history of this Request",
          "$ref": "#/definitions/ResourceLink"
        },
        "creationDate": {
          "type": "string",
          "description": "The date when the Request was created (in the format yyyy-MM-dd'T'HH:mm:ss.SSS'Z')"
        },
        "custom1": {
          "description": "The details from the Custom fields. These fields may not have data, depending on the configuration",
          "$ref": "#/definitions/CustomField"
        },
        "custom10": {
          "description": "The details from the Custom fields. These fields may not have data, depending on the configuration",
          "$ref": "#/definitions/CustomField"
        },
        "custom11": {
          "description": "The details from the Custom fields. These fields may not have data, depending on the configuration",
          "$ref": "#/definitions/CustomField"
        },
        "custom12": {
          "description": "The details from the Custom fields. These fields may not have data, depending on the configuration",
          "$ref": "#/definitions/CustomField"
        },
        "custom13": {
          "description": "The details from the Custom fields. These fields may not have data, depending on the configuration",
          "$ref": "#/definitions/CustomField"
        },
        "custom14": {
          "description": "The details from the Custom fields. These fields may not have data, depending on the configuration",
          "$ref": "#/definitions/CustomField"
        },
        "custom15": {
          "description": "The details from the Custom fields. These fields may not have data, depending on the configuration",
          "$ref": "#/definitions/CustomField"
        },
        "custom16": {
          "description": "The details from the Custom fields. These fields may not have data, depending on the configuration",
          "$ref": "#/definitions/CustomField"
        },
        "custom17": {
          "description": "The details from the Custom fields. These fields may not have data, depending on the configuration",
          "$ref": "#/definitions/CustomField"
        },
        "custom18": {
          "description": "The details from the Custom fields. These fields may not have data, depending on the configuration",
          "$ref": "#/definitions/CustomField"
        },
        "custom19": {
          "description": "The details from the Custom fields. These fields may not have data, depending on the configuration",
          "$ref": "#/definitions/CustomField"
        },
        "custom2": {
          "description": "The details from the Custom fields. These fields may not have data, depending on the configuration",
          "$ref": "#/definitions/CustomField"
        },
        "custom20": {
          "description": "The details from the Custom fields. These fields may not have data, depending on the configuration",
          "$ref": "#/definitions/CustomField"
        },
        "custom3": {
          "description": "The details from the Custom fields. These fields may not have data, depending on the configuration",
          "$ref": "#/definitions/CustomField"
        },
        "custom4": {
          "description": "The details from the Custom fields. These fields may not have data, depending on the configuration",
          "$ref": "#/definitions/CustomField"
        },
        "custom5": {
          "description": "The details from the Custom fields. These fields may not have data, depending on the configuration",
          "$ref": "#/definitions/CustomField"
        },
        "custom6": {
          "description": "The details from the Custom fields. These fields may not have data, depending on the configuration",
          "$ref": "#/definitions/CustomField"
        },
        "custom7": {
          "description": "The details from the Custom fields. These fields may not have data, depending on the configuration",
          "$ref": "#/definitions/CustomField"
        },
        "custom8": {
          "description": "The details from the Custom fields. These fields may not have data, depending on the configuration",
          "$ref": "#/definitions/CustomField"
        },
        "custom9": {
          "description": "The details from the Custom fields. These fields may not have data, depending on the configuration",
          "$ref": "#/definitions/CustomField"
        },
        "endDate": {
          "type": "string",
          "description": "The end date of the Request (in the format YYYY-MM-DD)"
        },
        "endTime": {
          "type": "string",
          "description": "The end time of the Request (in the format HH:MM)"
        },
        "everSentBack": {
          "type": "boolean",
          "example": false,
          "description": "Indicates whether the Request has ever been sent back to the employee"
        },
        "exceptions": {
          "description": "List of exceptions of this Request",
          "$ref": "#/definitions/ResourceLink"
        },
        "expenses": {
          "type": "array",
          "description": "Expected expenses attached to this Request",
          "items": {
            "$ref": "#/definitions/ResourceLink"
          }
        },
        "extensionOf": {
          "description": "The Request that this Request is an extension of, or addendum to",
          "$ref": "#/definitions/RequestLink"
        },
        "highestExceptionLevel": {
          "type": "string",
          "description": "The highest level of exception contained in this Request. One of { NONE, WARNING, ERROR }",
          "enum": [
            "NONE",
            "WARNING",
            "ERROR"
          ]
        },
        "href": {
          "type": "string",
          "description": "Hyperlink to the resource for this Request"
        },
        "id": {
          "type": "string",
          "description": "The unique identifier of the Request"
        },
        "lastModified": {
          "type": "string",
          "description": "The date when the Request was last modified"
        },
        "mainDestination": {
          "description": "The main destination of the Request",
          "$ref": "#/definitions/Location"
        },
        "name": {
          "type": "string",
          "description": "The name of the Request"
        },
        "operations": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Link"
          }
        },
        "owner": {
          "description": "The employee who owns the Request",
          "$ref": "#/definitions/Employee"
        },
        "pendingApproval": {
          "type": "boolean",
          "description": "Indicates whether this Request is pending approval"
        },
        "policy": {
          "description": "The policy that applies to the Request",
          "$ref": "#/definitions/ResourceLink"
        },
        "requestId": {
          "type": "string",
          "description": "The public key of the Request (unique per customer)"
        },
        "startDate": {
          "type": "string",
          "description": "The start date of the Request (in the format YYYY-MM-DD)"
        },
        "startTime": {
          "type": "string",
          "description": "The start time of the Request (in the format HH:MM)"
        },
        "submitDate": {
          "type": "string",
          "description": "The date when the Request was submitted (last submit date in case of recall)"
        },
        "totalApprovedAmount": {
          "description": "The total amount of approved expenses in the Request, expressed in the reimbursement currency of the employee at the time they created the Request",
          "$ref": "#/definitions/Amount"
        },
        "totalPostedAmount": {
          "description": "The total amount of the Request, expressed in the reimbursement currency of the employee at the time he created the Request",
          "$ref": "#/definitions/Amount"
        },
        "totalRemainingAmount": {
          "description": "The total amount not included in an Expense report, expressed in the reimbursement currency of the employee at the time he created the Request",
          "$ref": "#/definitions/Amount"
        },
        "travelAgency": {
          "description": "The travel agency office that is managing the trip associated to this Request",
          "$ref": "#/definitions/ResourceLink"
        },
        "type": {
          "description": "The type of the Request, inherited from the Request policy type",
          "$ref": "#/definitions/RequestType"
        }
      }
    },
    "RequestException": {
      "type": "object",
      "properties": {
        "code": {
          "type": "string",
          "description": "The system exception code defined for the exception. Example: BADCODE"
        },
        "isBlocking": {
          "type": "boolean",
          "example": false,
          "description": "Defines whether the exception will prevent the Request from being submitted"
        },
        "level": {
          "type": "integer",
          "format": "int64",
          "description": "The numeric level associated with the exception. Example: 99"
        },
        "message": {
          "type": "string",
          "description": "The user-facing message defined for the exception"
        },
        "parameters": {
          "type": "object",
          "description": "Parameters for the messages of the exception",
          "additionalProperties": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "source": {
          "description": "The source of the exception",
          "$ref": "#/definitions/ExceptionSource"
        }
      }
    },
    "RequestLink": {
      "type": "object",
      "properties": {
        "requestId": {
          "type": "string",
          "description": "The public id of the Request"
        }
      }
    },
    "ResourceLink": {
      "type": "object",
      "properties": {
        "href": {
          "type": "string",
          "description": "Hyperlink to the resource"
        },
        "id": {
          "type": "string",
          "description": "Unique identifier of the related object"
        },
        "template": {
          "type": "string",
          "description": "Hyperlink template to the resource"
        }
      }
    },
    "RequestType": {
      "type": "object",
      "properties": {
        "code": {
          "type": "string",
          "description": "The code of the type inherited from the Request policy type"
        },
        "label": {
          "type": "string",
          "description": "The label of the type inherited from the Request policy type"
        }
      }
    },
    "ResourceOfPolicy": {
      "type": "object",
      "properties": {
        "href": {
          "type": "string",
          "description": "Hyperlink to the resource for this Request policy"
        },
        "id": {
          "type": "string",
          "description": "Unique identifier of the Request policy",
          "minLength": 1,
          "maxLength": 2147483647
        },
        "name": {
          "type": "string",
          "description": "Name of the Request policy",
          "minLength": 1,
          "maxLength": 2147483647
        }
      }
    },
    "ResourceOfTravelAgency": {
      "type": "object",
      "properties": {
        "emailAddress": {
          "type": "string",
          "description": "The travel agency email address"
        },
        "id": {
          "type": "string",
          "description": "The travel agency unique identifier",
          "minLength": 1,
          "maxLength": 2147483647
        },
        "name": {
          "type": "string",
          "description": "The travel agency office name",
          "minLength": 1,
          "maxLength": 2147483647
        },
        "proposalType": {
          "type": "string",
          "description": "The travel agency proposal type",
          "enum": [
            "CWTF",
            "AEBT",
            "API",
            "NONE"
          ]
        }
      }
    },
    "SegmentLeg": {
      "type": "object",
      "properties": {
        "class": {
          "description": "The class of the segment leg.",
          "$ref": "#/definitions/ListItemField"
        },
        "classOfService": {
          "type": "string",
          "description": "The class of service of the segment leg. For example, in the case of an air segment, this field would contain the one-letter booking code: Y for economy class, or F for first class..."
        },
        "comment": {
          "type": "string",
          "description": "A comment for this segment leg"
        },
        "custom1": {
          "description": "The details from the Custom fields. These fields may not have data, depending on the configuration",
          "$ref": "#/definitions/CustomField"
        },
        "custom10": {
          "description": "The details from the Custom fields. These fields may not have data, depending on the configuration",
          "$ref": "#/definitions/CustomField"
        },
        "custom11": {
          "description": "The details from the Custom fields. These fields may not have data, depending on the configuration",
          "$ref": "#/definitions/CustomField"
        },
        "custom12": {
          "description": "The details from the Custom fields. These fields may not have data, depending on the configuration",
          "$ref": "#/definitions/CustomField"
        },
        "custom13": {
          "description": "The details from the Custom fields. These fields may not have data, depending on the configuration",
          "$ref": "#/definitions/CustomField"
        },
        "custom14": {
          "description": "The details from the Custom fields. These fields may not have data, depending on the configuration",
          "$ref": "#/definitions/CustomField"
        },
        "custom15": {
          "description": "The details from the Custom fields. These fields may not have data, depending on the configuration",
          "$ref": "#/definitions/CustomField"
        },
        "custom16": {
          "description": "The details from the Custom fields. These fields may not have data, depending on the configuration",
          "$ref": "#/definitions/CustomField"
        },
        "custom17": {
          "description": "The details from the Custom fields. These fields may not have data, depending on the configuration",
          "$ref": "#/definitions/CustomField"
        },
        "custom18": {
          "description": "The details from the Custom fields. These fields may not have data, depending on the configuration",
          "$ref": "#/definitions/CustomField"
        },
        "custom19": {
          "description": "The details from the Custom fields. These fields may not have data, depending on the configuration",
          "$ref": "#/definitions/CustomField"
        },
        "custom2": {
          "description": "The details from the Custom fields. These fields may not have data, depending on the configuration",
          "$ref": "#/definitions/CustomField"
        },
        "custom20": {
          "description": "The details from the Custom fields. These fields may not have data, depending on the configuration",
          "$ref": "#/definitions/CustomField"
        },
        "custom21": {
          "description": "The details from the Custom fields. These fields may not have data, depending on the configuration",
          "$ref": "#/definitions/CustomField"
        },
        "custom22": {
          "description": "The details from the Custom fields. These fields may not have data, depending on the configuration",
          "$ref": "#/definitions/CustomField"
        },
        "custom23": {
          "description": "The details from the Custom fields. These fields may not have data, depending on the configuration",
          "$ref": "#/definitions/CustomField"
        },
        "custom24": {
          "description": "The details from the Custom fields. These fields may not have data, depending on the configuration",
          "$ref": "#/definitions/CustomField"
        },
        "custom25": {
          "description": "The details from the Custom fields. These fields may not have data, depending on the configuration",
          "$ref": "#/definitions/CustomField"
        },
        "custom26": {
          "description": "The details from the Custom fields. These fields may not have data, depending on the configuration",
          "$ref": "#/definitions/CustomField"
        },
        "custom27": {
          "description": "The details from the Custom fields. These fields may not have data, depending on the configuration",
          "$ref": "#/definitions/CustomField"
        },
        "custom28": {
          "description": "The details from the Custom fields. These fields may not have data, depending on the configuration",
          "$ref": "#/definitions/CustomField"
        },
        "custom29": {
          "description": "The details from the Custom fields. These fields may not have data, depending on the configuration",
          "$ref": "#/definitions/CustomField"
        },
        "custom3": {
          "description": "The details from the Custom fields. These fields may not have data, depending on the configuration",
          "$ref": "#/definitions/CustomField"
        },
        "custom30": {
          "description": "The details from the Custom fields. These fields may not have data, depending on the configuration",
          "$ref": "#/definitions/CustomField"
        },
        "custom31": {
          "description": "The details from the Custom fields. These fields may not have data, depending on the configuration",
          "$ref": "#/definitions/CustomField"
        },
        "custom32": {
          "description": "The details from the Custom fields. These fields may not have data, depending on the configuration",
          "$ref": "#/definitions/CustomField"
        },
        "custom33": {
          "description": "The details from the Custom fields. These fields may not have data, depending on the configuration",
          "$ref": "#/definitions/CustomField"
        },
        "custom34": {
          "description": "The details from the Custom fields. These fields may not have data, depending on the configuration",
          "$ref": "#/definitions/CustomField"
        },
        "custom35": {
          "description": "The details from the Custom fields. These fields may not have data, depending on the configuration",
          "$ref": "#/definitions/CustomField"
        },
        "custom36": {
          "description": "The details from the Custom fields. These fields may not have data, depending on the configuration",
          "$ref": "#/definitions/CustomField"
        },
        "custom37": {
          "description": "The details from the Custom fields. These fields may not have data, depending on the configuration",
          "$ref": "#/definitions/CustomField"
        },
        "custom38": {
          "description": "The details from the Custom fields. These fields may not have data, depending on the configuration",
          "$ref": "#/definitions/CustomField"
        },
        "custom39": {
          "description": "The details from the Custom fields. These fields may not have data, depending on the configuration",
          "$ref": "#/definitions/CustomField"
        },
        "custom4": {
          "description": "The details from the Custom fields. These fields may not have data, depending on the configuration",
          "$ref": "#/definitions/CustomField"
        },
        "custom40": {
          "description": "The details from the Custom fields. These fields may not have data, depending on the configuration",
          "$ref": "#/definitions/CustomField"
        },
        "custom5": {
          "description": "The details from the Custom fields. These fields may not have data, depending on the configuration",
          "$ref": "#/definitions/CustomField"
        },
        "custom6": {
          "description": "The details from the Custom fields. These fields may not have data, depending on the configuration",
          "$ref": "#/definitions/CustomField"
        },
        "custom7": {
          "description": "The details from the Custom fields. These fields may not have data, depending on the configuration",
          "$ref": "#/definitions/CustomField"
        },
        "custom8": {
          "description": "The details from the Custom fields. These fields may not have data, depending on the configuration",
          "$ref": "#/definitions/CustomField"
        },
        "custom9": {
          "description": "The details from the Custom fields. These fields may not have data, depending on the configuration",
          "$ref": "#/definitions/CustomField"
        },
        "endDate": {
          "type": "string",
          "description": "The end date of the segment leg (in the format YYYY-MM-DD).It represents the arrival date of AIRFR and TRAIN segments, check out date for HOTEL or drop off for CARRT"
        },
        "endLocation": {
          "description": "The end location of the segment leg",
          "$ref": "#/definitions/Location"
        },
        "endLocationDetail": {
          "type": "string",
          "description": "Additional details about the end location. It is used for HOTEL and CARRT segments."
        },
        "endTime": {
          "type": "string",
          "description": "The end time of the segment leg (in the format HH:MM). It is expressed in the local time of the end location"
        },
        "id": {
          "type": "string",
          "description": "The unique identifier of the segment leg"
        },
        "returnLeg": {
          "type": "boolean",
          "example": false,
          "description": "This value indicates if the leg is a return leg or not."
        },
        "segmentLocator": {
          "type": "string",
          "description": "The identifier for Concur Travel segments"
        },
        "startDate": {
          "type": "string",
          "description": "The start date of the segment leg (in the format YYYY-MM-DD). It represents the departure date of AIRFR and TRAIN segments, check in date for HOTEL or pickup for CARRT"
        },
        "startLocation": {
          "description": "The start location of the segment leg (for HOTEL, this is empty)",
          "$ref": "#/definitions/Location"
        },
        "startLocationDetail": {
          "type": "string",
          "description": "Additional details about the start location. It is used for HOTEL and CARRT segments."
        },
        "startTime": {
          "type": "string",
          "description": "The start time of the segment leg (in the format HH:MM). It is expressed in the local time of the start location"
        },
        "vendorName": {
          "type": "string",
          "description": "The name of the vendor of this segment leg."
        }
      }
    },
    "SegmentType": {
      "type": "object",
      "properties": {
        "category": {
          "type": "string",
          "description": "The category of the segment type",
          "enum": [
            "REQ_SEG_AIRFR",
            "REQ_SEG_CARRT",
            "REQ_SEG_HOTEL",
            "REQ_SEG_LIMOF",
            "REQ_SEG_RAILF",
            "REQ_SEG_TAXIF",
            "REQ_SEG_MISC",
            "REQ_SEG_PARKG",
            "REQ_SEG_DININ",
            "REQ_SEG_EVENT"
          ]
        },
        "code": {
          "type": "string",
          "description": "The code of the segment type. This will most frequently be a String, but could also be an integer in the case of a custom expense typeFor example, would be category = REQ_SEG_AIRFR and code = AIRFR for a regular air segment, but category = REQ_SEG_AIRFR and code = 10325 for a custom air segment."
        }
      }
    },
    "TemporalUnit": {
      "description": "A unit of date-time, such as Days or Hours.",
      "type": "object",
      "properties": {
        "dateBased": {
          "description": "If this unit represents a component of a date.",
          "type": "boolean"
        },
        "duration": {
          "description": "The duration of this unit, which may be an estimate.",
          "$ref": "#/definitions/Duration"
        },
        "durationEstimated": {
          "description": "If the duration of the unit is an estimate.",
          "type": "boolean"
        },
        "timeBased": {
          "description": "If this unit represents a component of a time.",
          "type": "boolean"
        }
      }
    },
    "TravelAllowance": {
      "type": "object",
      "properties": {
        "dailyTravelAllowanceId": {
          "type": "string",
          "description": "The fixed daily travel allowance id associated with the expected expense"
        }
      }
    },
    "TripData": {
      "type": "object",
      "required": [
        "segmentType"
      ],
      "properties": {
        "agencyBooked": {
          "type": "boolean",
          "example": false,
          "description": "Indicates whether this trip has been booked by a Travel Agency or not. True if this trip is (or has to be) handled by a Travel Agency."
        },
        "legs": {
          "type": "array",
          "description": "List of the legs composing this segment",
          "items": {
            "$ref": "#/definitions/SegmentLeg"
          }
        },
        "segmentType": {
          "description": "The type of the segment",
          "$ref": "#/definitions/SegmentType"
        },
        "selfBooked": {
          "type": "boolean",
          "example": false,
          "description": "True if this trip has been reserved by Concur Travel, or if Concur Travel has retrieved the trip information in the GDS"
        },
        "tripType": {
          "type": "string",
          "description": "Indicates the type of this trip. Possible values are: ONE_WAY, ROUND_TRIP, MULTI_STOPS",
          "enum": [
            "ONE_WAY",
            "ROUND_TRIP",
            "MULTI_STOPS"
          ]
        }
      }
    },
    "Vendor": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "The vendor identifier of the expected expense"
        },
        "name": {
          "type": "string",
          "description": "The vendor description of the expected expense"
        }
      }
    },
    "WorkflowAction": {
      "type": "string",
       "description": "Comment when the workflow action is ‘sendback’."
    },
    "ZoneId": {
      "description": "The time zone of the booking.",
      "type": "object",
      "properties": {
        "id": {
          "description": "The time zone abbreviations.",
          "type": "string"
        },
        "rules": {
          "description": "Rules of the time offset",
          "$ref": "#/definitions/ZoneRules"
        }
      }
    },
    "ZoneOffset": {
      "description": "The offset applicable at the specified instant in these rules.",
      "type": "object",
      "properties": {
        "id": {
          "description": "The normalized zone offset ID.",
          "type": "string"
        },
        "rules": {
          "description": "Rules of the time offset",
          "$ref": "#/definitions/ZoneRules"
        },
        "totalSeconds": {
          "description": "The total zone offset in seconds.",
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "ZoneOffsetTransition": {
      "description": " The offset transition applicable at the specified local date-time.",
      "type": "object",
      "properties": {
        "dateTimeAfter": {
          "description": "The local transition date-time, as would be expressed with the 'after' offset.",
          "type": "string",
          "format": "date-time"
        },
        "dateTimeBefore": {
          "description": "The local transition date-time, as would be expressed with the 'before' offset.",
          "type": "string",
          "format": "date-time"
        },
        "duration": {
          "description": "The duration of the transition.",
          "$ref": "#/definitions/Duration"
        },
        "gap": {
          "description": "Does this transition represent a gap in the local time-line.",
          "type": "boolean"
        },
        "instant": {
          "description": "The transition instant.",
          "type": "string",
          "format": "date-time"
        },
        "offsetAfter": {
          "description": "The offset after the transition.",
          "$ref": "#/definitions/ZoneOffset"
        },
        "offsetBefore": {
          "description": "The offset before the transition.",
          "$ref": "#/definitions/ZoneOffset"
        },
        "overlap": {
          "description": "Does this transition represent an overlap in the local time-line.",
          "type": "boolean"
        }
      }
    },
    "ZoneOffsetTransitionRule": {
      "description": "The list of transition rules for years beyond those defined in the transition list.",
      "type": "object",
      "properties": {
        "dayOfMonthIndicator": {
          "description": "The indicator of the day-of-month of the transition.",
          "type": "integer",
          "format": "int32"
        },
        "dayOfWeek": {
          "description": "The day-of-week of the transition.",
          "type": "string",
          "enum": [
            "MONDAY",
            "TUESDAY",
            "WEDNESDAY",
            "THURSDAY",
            "FRIDAY",
            "SATURDAY",
            "SUNDAY"
          ]
        },
        "localTime": {
          "description": "The local time of day of the transition.",
          "$ref": "#/definitions/LocalTime"
        },
        "midnightEndOfDay": {
          "description": "Is the transition local time midnight at the end of day.",
          "type": "boolean"
        },
        "month": {
          "description": "The month of the transition.",
          "type": "string",
          "enum": [
            "JANUARY",
            "FEBRUARY",
            "MARCH",
            "APRIL",
            "MAY",
            "JUNE",
            "JULY",
            "AUGUST",
            "SEPTEMBER",
            "OCTOBER",
            "NOVEMBER",
            "DECEMBER"
          ]
        },
        "offsetAfter": {
          "description": "The offset applicable at the specified instant in these rules.",
          "$ref": "#/definitions/ZoneOffset"
        },
        "offsetBefore": {
          "description": "The offset applicable at the specified instant in these rules.",
          "$ref": "#/definitions/ZoneOffset"
        },
        "standardOffset": {
          "description": "The offset applicable at the specified instant in these rules.",
          "$ref": "#/definitions/ZoneOffset"
        },
        "timeDefinition": {
          "description": "The local time can be converted to an instant using the standard offset, the wall offset or UTC.",
          "type": "string",
          "enum": [
            "UTC",
            "WALL",
            "STANDARD"
          ]
        }
      }
    },
    "ZoneRules": {
      "description": "Rules of the time offset",
      "type": "object",
      "properties": {
        "fixedOffset": {
          "description": "true if the time-zone is fixed and the offset never changes",
          "type": "boolean"
        },
        "transitionRules": {
          "description": "The list of transition rules for years beyond those defined in the transition list.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/ZoneOffsetTransitionRule"
          }
        },
        "transitions": {
          "description": "The offset transition applicable at the specified local date-time.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/ZoneOffsetTransition"
          }
        }
      }
    }
  }
}
